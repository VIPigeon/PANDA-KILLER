
DialogWindow = {}

function DialogWindow:new(x, y, text)
    local obj = {
        x = x,
        y = y,
        text = text,
        is_closed = false,
    }
    
    setmetatable(obj,self)  -- —á–∏—Å—Ç–∞—è –º–∞–≥–∏—è!
    return obj
end


function DialogWindow:update()
    -- –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è

    self:close()
end


function DialogWindow:draw()
    -- a –∑–¥–µ—Å—å –≤—ã–ª–µ—Ç–∏—Ç –ø—Ç–∏—á–∫–∞

    --trace('im closed')
    if self.is_closed then
        return
    end
    if game.player.is_dead then
        DialogWindow:draw_dialog_death()
        self.is_closed = false
    end
    
    -- –ö—Ç–æ –ø–æ–º–µ–Ω—è–µ—Ç, —Ç–æ—Ç –±–µ–¥ –Ω–µ –æ–±–µ—Ä—ë—Ç—Å—è
    
    if not (TriggerTiles.__is_active__ == nil) and TriggerTiles.__is_active__.status and TriggerTiles.__is_active__.type == 'MONOLOGUE' then
        -- –ù—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥üôÑ
        trace('reading dialog of trigger-'..tostring(TriggerTiles.__is_active__.trigger))
        DialogWindow:draw_monologue(TriggerTiles.__is_active__.trigger)

        self.is_closed = false
    end

    if not (TriggerTiles.__is_active__ == nil) and TriggerTiles.__is_active__.status and TriggerTiles.__is_active__.type == 'BIKE' then
        --trace('wrrrrrrrrrrrrrrrr')
        DialogWindow:draw_bikelogue(TriggerTiles.__is_active__.trigger)

        self.is_closed = false
    end

    -- –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ñ–∏–∫—Å–∏–ºüôè
    if self.tugologue then
        self:draw_tugologue()
        self.is_closed = false
    end
end 
    
function DialogWindow:draw_dialog()
    if self.text == "" then
        return
    end
    local max_width = 0
    local count_width = 0
    local count_line = 1

    for i = 1, #self.text do
        if self.text:sub(i,i) ~= '\n' then
            count_width = count_width + 1
        else 
            if max_width < count_width then
                max_width = count_width   
            end
            count_line = count_line + 1
            count_width = 0
        end
    end
    if max_width < count_width then
        max_width = count_width   
    end

    rect(self.x-5,self.y-5,max_width*9+10,count_line*9+9,0)
    font(self.text,self.x,self.y,15,true)
end

function DialogWindow:draw_dialog_death()
    self.text = russian_to_translit('\n\n\n\n\n\n  –î–õ–Ø –í–û–ó–†–û–ñ–î–ï–ù–ò–Ø –ù–ê–ñ–ú–ò–¢–ï\n   –ù–ê –û–î–ù–£ –õ–Æ–ë–£–Æ –ö–ù–û–ü–ö–£')
    self.x = 0
    self.y = 0
    rect(self.x,self.y,SCREEN_WIDTH,SCREEN_HEIGHT,0)
    self:draw_dialog()
end 

function DialogWindow:draw_monologue(trigger)
    --trace('hellp')
    self.text = russian_to_translit(trigger.dialog_text)
    self.x = trigger.x + trigger.dialog_offset.x
    self.y = trigger.y + trigger.dialog_offset.y
    rect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0)
    self:draw_dialog()
    --trace(self.text)
end

function DialogWindow:draw_bikelogue(trigger)
    --self.text = russian_to_translit(trigger.dialog_text)
    --self.x = trigger.x + trigger.dialog_offset.x
    --self.y = trigger.y + trigger.dialog_offset.y
    --rect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0)
    --self:draw_dialog()
    trigger.wrapper:init_go_away()
    trigger.wrapper:go_away()
    trigger.wrapper:draw()
end

function DialogWindow:draw_tugologue(trigger)
    -- —è –Ω–µ –¥—É–º–º–∞—é, —á—Ç–æ —ç—Ç–æ —Å–∏–ª—å–Ω–æ –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ö–∞–Ω–∏–∫,
    -- –∫–∞–∫ —Ä–∞–∑, —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —É –Ω–∞—Å
    self.tugologue = true
    -- –¥–∞, –µ—Å–ª–∏ —É dialogwindow –Ω–µ –±—É–¥–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–º –∏–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å trigger–æ–º,
    -- —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ un–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ behave–¥–µ–Ω–∏–µ
    self.trigger = trigger
    self.trigger.text_progress = ClickerMinigame.update_progress_for_visual()

    self.text = 'PROG'..self.trigger.text_progress
    -- 'BANBOOK GAME. LIFE OR DEATH?'
    self.x = 0
    self.y = 0
    rect(self.x, self.y, 50, 50, 0)
    self:draw_dialog()

    ClickerMinigame:update()
    ClickerMinigame:draw()
end

function DialogWindow:close()
    -- –Ø —É–±—Ä–∞–ª –æ—Ç—Å—é–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ BUTTON_A, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É.
    --–ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ, –ø–æ—Ç–æ–º —Ä–∞–∑–±–µ—Ä—ë–º—Å—è
    if btnp(BUTTON_S) or btnp(BUTTON_X) or btnp(BUTTON_Z) then
        self.is_closed = true
        self.text = ""
        self:draw_dialog()
        game.status = true
        game.player.is_dead = false
        game.dialog_window = DialogWindow:new(0,0, '')
    end
end

DialogWindow.__index = DialogWindow  -- –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µü§¶‚Äç‚ôÇÔ∏è
