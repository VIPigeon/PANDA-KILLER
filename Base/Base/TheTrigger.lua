TriggerTile = table.copy(Body)

function TriggerTile:new(x, y, width, height, triggerAction, sprite, wrapper)
    width = width or 1
    height = height or 8
    wrapper = wrapper or nil
    sprite = sprite or nil
    local TilerDerden = {
        sprite = sprite,
        hitbox = Hitbox:new(0, 0, width, height),
        x = x, y = y,
        status = 'idle',
        button_pressed = false,
        button_offset = {
            x = width // 8, y = -(height // 8 + 12),
        },
        dialog_offset = {
            x = width // 8 - 12, y = - (height // 8 + 24)
        },
        dialog_text = '–ê –¢–ê–ö–û–ï –í–ò–î–ï–õ?',
        drown = false, -- keep calmü§ô just chill bro. funny name

        trigger_action = triggerAction,
        wrapper = wrapper,
    }

    setmetatable(TilerDerden, self)
    self.__index = self; 
    return TilerDerden
end

function TriggerTile:trigger()
    self.status = 'triggered'
end

function TriggerTile:untrigger()
    self.status = 'idle'
end

function TriggerTile:monitor_player()
end

function TriggerTile:is_colliding(collideable)
	return Physics.check_collision_obj_obj(self, collideable)
end

function TriggerTile:draw()
    Hitbox.rect_of(self):draw()
    
    --rect(self.x-5,self.y-5,10*9+10,10*9+9,0)
    if self.status == 'triggered' then
        local rx, ry = game.camera:transform_coordinates(self.x, self.y)
        spr(109, rx + self.button_offset.x, ry + self.button_offset.y)
    end
end

function TriggerTile:update()
	if self:is_colliding(game.player) then
        TriggerTiles.__is_active__ = nil
        self:trigger()
	end
    if self.status == 'triggered' then

        if not self:is_colliding(game.player) then
            self:untrigger()
        end

        self.button_pressed = btnp(BUTTON_A)

        self.trigger_action(self)
    end
    --self:monitor_player()
end

--–Ø –≤–∑—è–ª –∏–¥–µ—é —É –í–∞–Ω–∏. –ù—É —ç—Ç–æ —É–¥–æ–±–Ω–æ, –Ω–æ entities –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–µ–µ. –ö–∞–∫ –æ–±—ã—á–Ω–æ, –ª–∏—à—å –±—ã –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –¢–æ–ª—å–∫–æ –∏ —É–º–µ–µ—Ç–µ, —á—Ç–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å, —Ç—Ä—É–¥–æ–≥–æ–ª–∏–∫–∏ü•∂ü•∂üê¥
TriggerTiles = {
    Tiles = {}
}

function TriggerTiles.add(TriggerTile)
    table.insert(TriggerTiles.Tiles, TriggerTile)
end

function TriggerTiles.update()
    for _, trigger in ipairs(game.triggers) do
        trigger:update()
    end
end

function TriggerTiles.draw()
    for _, trigger in ipairs(game.triggers) do
        trigger:draw()
    end
end

TriggerActions = {}

function TriggerActions.dialogue(triggerTile)
    if triggerTile.button_pressed and not triggerTile.drown then
        --self.drown = true
        TriggerTiles.__is_active__ = {status = true, trigger = triggerTile, type = 'MONOLOGUE'}
        -- –ó–¥–µ—Å—å —è –¥–µ–ª–∞—é –≥–æ–≤–Ω–æ–∫–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü—É –≥–¥–µ –∫–∞–∑–∞–ª–æ—Å—å –±—ã –ª–µ–∂–∞—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã
        -- –¥–æ–±–∞–≤–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ DialogWindow
        -- –ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª KanyaQT: "–ê —á—Ç–æ? –î—É–º–∞–µ—Ç–µ —ç—Ç–æ –Ω–µ –∫—Ä—É—Ç–æ ... ? ... –ü–æ–∑–æ—Ä. ... –ù–µ, —Ä–µ–∞–ª—å–Ω–æ ... ."
        -- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å Game, —ç—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª–æ–º–∞–µ—Ç
        -- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –≤ DialogWindow, —ç—Ç–æ –≤—Å—ë –ø–æ–ª–æ–º–∞–µ—Ç
        -- –ü–æ—ç—Ç–æ–º—É –º–æ–π –¥–æ–ª–≥ —Å–Ω—è—Ç—å —Å —Å–µ–±—è —ç—Ç–æ –≤–∏–Ω—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å 8 —Å—Ç—Ä–æ–∫ –æ —Ç–æ–º,
        -- —á—Ç–æ –Ω–∞—Ä—É—à–∞—Ç—å —ç—Ç–æ –•–†–£–ü–ö–û–ï —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ **–ù–ï–õ–¨–ó–Ø**
        local __dx_dw = DialogWindow:new(triggerTile.x + triggerTile.dialog_offset.x, triggerTile.y + triggerTile.dialog_offset.y, triggerTile.dialog_text)
        __dx_dw.is_closed = false
        table.insert(game.CRUTCH_dialog_window, __dx_dw)
        game.state = GAME_STATE_RIDING_BIKE
        triggerTile:untrigger()
    end
end

function TriggerActions.bike(triggerTile)
    if true then --triggerTile.button_pressed then
        triggerTile.wrapper.sprite = data.bike.sprite.saddled

        TriggerTiles.__is_active__ = {status = true, trigger = triggerTile, type = 'BIKE'}
        -- –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å—Ü–µ–Ω—ã —Å –±–∞–π–∫–æ–º –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Ç–∏—Ç—Ä–æ–≤(–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç–∏—Ç—Ä–æ–≤), —Ç–æ –≤—Å—ë —Å–ª–æ–º–∞–µ—Ç—Å—è
        game.player.hide = true
        local __dx_dw = DialogWindow:new(0, 0, 0, 0, '')
        __dx_dw.is_closed = false
        table.insert(game.CRUTCH_dialog_window, __dx_dw)
        game.state = GAME_STATE_RIDING_BIKE
        triggerTile:untrigger()
    end
end

function TriggerActions.tug_of(triggerTile)
    if true then
        -- dead code
        game.state = GAME_STATE_RIDING_BIKE
        TriggerTiles.__is_active__ = {status = true, trigger = triggerTile, type = 'TUGGING'}
        local __dx_dw = DialogWindow:new(triggerTile.x + triggerTile.dialog_offset.x, triggerTile.y + triggerTile.dialog_offset.y, triggerTile.dialog_text)
        __dx_dw.is_closed = false
        table.insert(game.CRUTCH_dialog_window, __dx_dw)
    end
end
