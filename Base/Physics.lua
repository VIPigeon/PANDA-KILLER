--[[

–î–∞–≤–∞–π—Ç–µ –ø–æ—è—Å–Ω—é –∑–∞ —Ñ–∏–∑–∏–∫—É ‚öΩ

–£ –Ω–∞—Å –µ—Å—Ç—å Hitbox-—ã, Rect-—ã –∏ Rigidbody.

–û—Ç–¥–µ–ª—å–Ω–æ –Ω–∏–∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ Rigidbody –Ω–µ—Ç—É, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å".
Rigidbody - —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –ø–æ–ª—è x, y, velocity –∏ hitbox.
–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É physics_settings, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
–≤ Physics.update().

–ù–∞–ø—Ä–∏–º–µ—Ä, –∏–≥—Ä–æ–∫ —ç—Ç–æ Rigidbody:

player = {
    x = 0,
    y = 0,
    velocity = { x = 0, y = 0 },
    hitbox = Hitbox:new(0, 0, 8, 8),
    physics_settings = {
        gravity = ...,
        friction = ...,
        min_horizontal_velocity = ...,
    },

    -- –ï—â—ë –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è...
    -- ...
}

–ü—Ä–æ —Ö–∏—Ç–±–æ–∫—Å—ã –∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –≤ `Hitbox.lua`

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: `move_x`, `move_y` –û–Ω–∏ –¥–≤–∏–≥–∞—é—Ç rigidbody –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å
–µ–≥–æ velocity, –∞ —Ç–∞–∫–∂–µ —Å–ª–µ–¥—è—Ç –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã —É –Ω–∞—Å –Ω–µ –±—ã–ª–æ –∫–æ–ª–ª–∏–∑–∏–π. –ï—Å–ª–∏ –∂–µ
–∫–æ–ª–ª–∏–∑–∏—è –±—ã–ª–∞, —Ç–æ `move_x` –∏ `move_y` –≤–µ—Ä–Ω—É—Ç –µ—ë (rigidbody –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç
–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω (–∫–∞–∫–æ–µ –∫—Ä—É—Ç–æ–µ —Å–ª–æ–≤–æ)).

–¢–∞–∫–∂–µ —è –¥–æ–±–∞–≤–∏–ª `update`, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –≤—Å—ë –∏ —Å—Ä–∞–∑—É.

–î–ª—è –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —à—Ç—É–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏. –û—Å–Ω–æ–≤–Ω–æ–π
–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∑–∏–∫–∏ –≤ –∏–≥—Ä–æ–∫–µ - –∑–∞—Ö–æ–¥–∏—Ç–µ —Ç—É–¥–∞ –∏ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç–µ –∫–æ–¥! üòÅ

–í–Ω–∏–º–∞–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–ª–ª–∏–∑–∏–∏ —Ç–æ–ª—å–∫–æ —Å —Ç–∞–π–ª–∞–º–∏. –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, –Ω–∞–ø—Ä–∏–º–µ—Ä,
–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –¥–≤—É—Ö –ø–∞–Ω–¥ –º–µ–∂–¥—É —Å–æ–±–æ–π (—Ç–æ –µ—Å—Ç—å –¥–≤–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–∞),
—Ç–æ —Ç—É—Ç —É–∂ —Ä–∞–∑–±–∏—Ä–∞–π—Ç–µ—Å—å —Å–∞–º–∏. –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ `check_collision_rect_rect` –≤–∞–º –≤
–ø–æ–º–æ—â—å.

--]]

Physics = {}

-- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä—è–º–æ –ø–æ–¥ —Ö–∏—Ç–±–æ–∫—Å–æ–º —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
function Physics.is_on_ground(rigidbody)
    local collision = Physics.check_collision_rect_tilemap(
        rigidbody.hitbox:to_rect(rigidbody.x, rigidbody.y + 1)
    )
    return collision ~= nil
end

function Physics.update(rigidbody)
    local is_on_ground = Physics.is_on_ground(rigidbody)

    local horizontal_collision = Physics.move_x(rigidbody)
    if horizontal_collision ~= nil then
        rigidbody.velocity.x = -1 * WORLD_HORIZONTAL_COEFFICIENT_OF_RESTITUTION * rigidbody.velocity.x
    end

    local vertical_collision = Physics.move_y(rigidbody)
    if vertical_collision ~= nil then
        rigidbody.velocity.y = 0
    end

    if not is_on_ground then
        rigidbody.velocity.y = rigidbody.velocity.y - rigidbody.physics_settings.gravity * Time.dt()
    end

    rigidbody.velocity.x = rigidbody.velocity.x - (rigidbody.velocity.x * rigidbody.physics_settings.friction * Time.dt())
    if math.abs(rigidbody.velocity.x) < rigidbody.physics_settings.min_horizontal_velocity then
        rigidbody.velocity.x = 0
    end
end

function Physics.move_x(rigidbody)
    local next_x = rigidbody.x + rigidbody.velocity.x * Time.dt()

    local rect_after_x_move = Rect.combine(
        Hitbox.to_rect(rigidbody.hitbox, rigidbody.x, rigidbody.y),
        Hitbox.to_rect(rigidbody.hitbox, next_x, rigidbody.y)
    )
    local tilemap_collision = Physics.check_collision_rect_tilemap(rect_after_x_move)
    if tilemap_collision ~= nil then
        local moving_right = rigidbody.velocity.x > 0
        if moving_right then
            next_x = tilemap_collision.x - rigidbody.hitbox.width - rigidbody.hitbox.offset_x
        else
            next_x = tilemap_collision.x + 8 - rigidbody.hitbox.offset_x
        end
    end

    next_x = math.clamp(next_x, -rigidbody.hitbox.offset_x, WORLD_WIDTH + rigidbody.hitbox.width)
    rigidbody.x = next_x

    return tilemap_collision
end

function Physics.move_y(rigidbody)
    -- –û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ ü§ì, —á—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è velocity - –ø–æ–ª–µ—Ç –≤–Ω–∏–∑, –≤ —Ç–æ –≤—Ä–µ–º—è
    -- –∫–∞–∫ –æ—Å—å y –≤ TIC-80 –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, —Ç.–µ. –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —Å–¥–≤–∏–Ω—É—Ç—å —á—Ç–æ-—Ç–æ
    -- **–≤–Ω–∏–∑** –Ω–∞ 5, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º y = y + 5.
    --
    -- –û—Ç—Å—é–¥–∞ –º–∏–Ω—É—Å –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º—É–ª–µ (–í move_x —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç)
    local next_y = rigidbody.y - rigidbody.velocity.y * Time.dt()

    local rect_after_y_move = Rect.combine(
        Hitbox.to_rect(rigidbody.hitbox, rigidbody.x, rigidbody.y),
        Hitbox.to_rect(rigidbody.hitbox, rigidbody.x, next_y)
    )
    local tilemap_collision = Physics.check_collision_rect_tilemap(rect_after_y_move)
    if tilemap_collision ~= nil then
        local flying_down = rigidbody.velocity.y < 0
        if flying_down then
            next_y = tilemap_collision.y - rigidbody.hitbox.height - rigidbody.hitbox.offset_y
        else
            next_y = tilemap_collision.y + rigidbody.hitbox.height + rigidbody.hitbox.offset_y
        end
    end

    next_y = math.clamp(next_y, 0, WORLD_HEIGHT)
    rigidbody.y = next_y

    return tilemap_collision
end

function Physics.check_collision_rect_rect(r1, r2)
    if r1:left() > r2:right() or
       r2:left() > r1:right() or
       r1:top() > r2:bottom() or
       r2:top() > r1:bottom() then
        return false
    end
    return true
end

function Physics.check_collision_shape_rect(shape, rect)
    for _, shape_rect in ipairs(shape.rects) do
        if Physics.check_collision_rect_rect(shape_rect, rect) then
            return true
        end
    end
    return false
end

-- TODO: –£–≤–µ—Ä–µ–Ω, –≤ –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ
-- —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ, –Ω–æ –≤–æ–æ–±—â–µ –≤—Å–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∏–ª–∏—Å—å.
function Physics.check_collision_rect_tilemap(rect)
    assert(rect.w ~= 0)
    assert(rect.h ~= 0)

    local x = rect.x
    local y = rect.y
    local x2 = rect.x + rect.w - 1
    local y2 = rect.y + rect.h - 1

    local tile_x = x // 8
    local tile_y = y // 8

    local tile_x1 = x // 8
    local tile_y1 = y // 8
    local tile_x2 = x2 // 8
    local tile_y2 = y2 // 8

    while y <= y2 do
        while x <= x2 do
            local tile_id = mget(tile_x, tile_y)

            if is_tile_solid(tile_id) then
                return {
                    x = 8 * tile_x,
                    y = 8 * tile_y,
                }
            end

            tile_x = tile_x + 1
            x = x + 8
        end

        y = y + 8
        tile_y = tile_y + 1
        x = rect.x
        tile_x = x // 8
    end

    if is_tile_solid(mget(tile_x2, tile_y1)) then
        return { x = 8 * tile_x2, y = 8 * tile_y1 }
    end

    if is_tile_solid(mget(tile_x1, tile_y2)) then
        return { x = 8 * tile_x1, y = 8 * tile_y2 }
    end

    if is_tile_solid(mget(tile_x2, tile_y2)) then
        return { x = 8 * tile_x2, y = 8 * tile_y2 }
    end

    return nil
end

-- TODO: –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é API
-- –ß—Ç–æ–±—ã API –Ω–µ –±—ã–ª–æ PAI(N) ü•Åüîä
function Physics.tile_ids_that_intersect_with_rect(rect)
    assert(rect.w ~= 0)
    assert(rect.h ~= 0)

    local x = rect.x
    local y = rect.y
    local x2 = rect.x + rect.w - 1
    local y2 = rect.y + rect.h - 1

    local tile_x = x // 8
    local tile_y = y // 8

    local tile_x1 = x // 8
    local tile_y1 = y // 8
    local tile_x2 = x2 // 8
    local tile_y2 = y2 // 8

    collisions = {}

    while y <= y2 do
        while x <= x2 do
            local tile_id = mget(tile_x, tile_y)
            table.insert(collisions, {x = tile_x, y = tile_y, id = tile_id})

            tile_x = tile_x + 1
            x = x + 8
        end

        y = y + 8
        tile_y = tile_y + 1
        x = rect.x
        tile_x = x // 8
    end

    local id_left_top = mget(tile_x2, tile_y1)
    table.insert(collisions, {x = tile_x2, y = tile_y1, id = id_left_top})

    local id_left_bottom = mget(tile_x1, tile_y2)
    table.insert(collisions, {x = tile_x1, y = tile_y2, id = id_left_bottom})

    local id_right_bottom = mget(tile_x2, tile_y2)
    table.insert(collisions, {x = tile_x2, y = tile_y2, id = id_right_bottom})

    return collisions
end
