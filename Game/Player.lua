--[[

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∂—É–Ω–≥–ª–∏! üå¥üêí

–ù–∏–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª–æ—Ç–Ω–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç–∏—Ä–∞–Ω–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–º. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
–≤—Å—è –ª–æ–≥–∏–∫–∞ –ª–µ–∂–∏—Ç –≤ player.update(). –ê —á—Ç–æ? –î—É–º–∞–µ—Ç–µ —ç—Ç–æ –Ω–µ –∫—Ä—É—Ç–æ(–≤–æ–æ–±—â–µ-—Ç–æ –¥–∞ << Nerd), —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–∞—è
—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –µ—â—ë –±–æ–ª—å—à–µ –≤ –±—É–¥—É—â–µ–º? –í–æ—Ç —á—Ç–æ –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫ (ü§Ø) —Å–∫–∞–∑–∞–ª
–±—ã –≤–∞–º: https://cbarrete.com/carmack.html

–ù–µ –∑–Ω–∞–µ—Ç–µ –∫—Ç–æ —Ç–∞–∫–æ–π –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫? –ü–æ–∑–æ—Ä. –ù–µ, —Ä–µ–∞–ª—å–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ —ç—Ç–æ ü§¨.
–ò —Å—Ç–∞—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ.

–ù–µ –≤–µ—Ä–∏—Ç–µ —ç—Ç–æ–º—É —Å—Ç–∞—Ä–∏—á–∫—É? –¢–æ–≥–¥–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä: –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ –∏–∑ Celeste üçì,
–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞ —Å, –ø–æ–∂–∞–ª—É–π, —Å–∞–º—ã–º –ª—É—á—à–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–≥–¥–∞ –ª–∏–±–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–º. –û–Ω –µ—Å—Ç—å
–≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ: https://github.com/NoelFB/Celeste/blob/master/Source/Player/Player.cs
–í —ç—Ç–æ–º –º–æ–Ω–æ–ª–∏—Ç–µ 5000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ò –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –í–æ—Ç —Ç–∞–∫!

–†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Ñ–∏–∑–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: https://2dengine.com/doc/platformers.html
–ö—Ä—É—Ç–æ–π –≤–∏–¥–æ—Å –ø—Ä–æ Celeste: https://www.youtube.com/watch?v=yorTG9at90g

–õ–ò–¶–ï–ù–ó–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –ó–ê–ü–†–ï–©–ï–ù–û.
–ï—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ $10. (c) –∫–∞–≤–∞–π–Ω—ã–π-–∫–æ–¥

--]]

Player = {}

function Player:new()
    local object = {
        x = PLAYER_SPAWNPOINT_X,
        y = PLAYER_SPAWNPOINT_Y,
        velocity = {
            x = 0,
            y = 0,
        },
        hitbox = Hitbox:new(6, 0, 4, 8),
        physics_settings = {
            gravity = PLAYER_GRAVITY,
            friction = PLAYER_FRICTION,
            min_horizontal_velocity = PLAYER_MIN_HORIZONTAL_VELOCITY,
        },

        animation_controller = AnimationController:new(SPRITES.player.idle),

        -- –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–º–∏—Ä–∞–µ—Ç, —É –Ω–µ–≥–æ —Å–ª–µ—Ç–∞–µ—Ç —à–ª—è–ø–∞
        hat = nil,

        attack_rects = {},
        attack_effect = nil,
        attack_effect_time = 0,
        attack_cooldown = 0,

        stuck_to_left_wall = false,
        stuck_to_right_wall = false,
        looking_left = false,
        was_on_ground_last_frame = false,
        was_sliding_on_wall_last_frame = false,
        we_jumped_off_a_panda = false,
        is_dead = false,
        hide = false,  -- –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —Å–∞–¥–∏—Ç—Å—è –Ω–∞ –±–∞–π–∫, –µ–≥–æ –Ω–∞–¥–æ –ø—Ä—è—Ç–∞—Ç—å

        -- –≠—Ç–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π. –ö–∞–∫ –ø–æ –¥—Ä—É–≥–æ–º—É, —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª üòú
        has_attacked_in_air = false,
        has_attacked_downward = false,
        has_attacked_upwards = false,
        just_attacked = false,

        coyote_time = 0.0,
        attack_timer = 0.0,
        jump_buffer_time = 0.0,
        remove_horizontal_speed_limit_time = 0.0,
        attack_buffer_time = 0.0,
        time_we_have_been_running = 0.0,

        time_before_showing_death_screen = 0.0,
    }

    setmetatable(object, self)
    return object
end

function Player:die(kill_velocity_x, kill_velocity_y)
    if self.is_dead then
        return
    end

    -- heart attack üíî <- üíì <- üí¢
    kill_velocity_x = kill_velocity_x or 0
    kill_velocity_y = kill_velocity_y or 0

    self.velocity.x = PLAYER_DEATH_KNOCKBACK_HORIZONTAL * math.sign(kill_velocity_x)
    self.velocity.y = PLAYER_DEATH_KNOCKBACK_VERTICAL

    self.time_before_showing_death_screen = PLAYER_TIME_BEFORE_SHOWING_DEATH_SCREEN_AFTER_DEATH
    self.is_dead = true

    self.attack_effect_time = 0
    self.attack_cooldown = 0
    self.hat = Hat:new(self.x, self.y, 0.5 * self.velocity.x + kill_velocity_x, 0.5 * self.velocity.y + kill_velocity_y)

    Basic.play_sound(SOUNDS.PLAYER_DEAD)
end

function Player:is_attacking_or_charging_attack()
    return self.attack_timer > 0 and
           table.contains(PLAYER_ATTACK_SPRITES, self.animation_controller.sprite)
end

function Player:is_attacking()
    return self.attack_timer > 0 and
           table.contains(PLAYER_ATTACK_SPRITES, self.animation_controller.sprite) and
           self.animation_controller:animation_ended()
end

function Player:update()
    if self.hide then
        return
    end

    if self.is_dead then
        Physics.update(self)
        self.hat:update()

        self.animation_controller:set_sprite(SPRITES.player.dead)
        self.time_before_showing_death_screen = Basic.tick_timer(self.time_before_showing_death_screen)
        if self.time_before_showing_death_screen == 0.0 then
            game.dialog_window.is_closed = false
            game.state = GAME_STATE_PAUSED
            self.x = PLAYER_SPAWNPOINT_X
            self.y = PLAYER_SPAWNPOINT_Y
            self.velocity.x = 0
            self.velocity.y = 0
        end

        return
    end

    -- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ update() üì∞
    --
    -- 1. –ù–∞ –Ω–∞—á–∞–ª–µ –∫–∞–¥—Ä–∞ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ "–∑–∞–ø—Ä–æ—Å–æ–≤" –∫ —Ñ–∏–∑–∏–∫–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    --    –∫–∞–∫–∏–µ —Å—Ç–µ–Ω—ã —Ä—è–¥–æ–º —Å –Ω–∞–º–∏, –Ω–∞ –∑–µ–º–ª–µ –ª–∏ –º—ã, —Ç.–¥.
    --
    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–ª—ã", —á—Ç–æ
    --    –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞.  –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –º—ã –Ω–∞–∂–∏–º–∞–µ–º RIGHT, —Ç–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    --    –ø–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ(!) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–æ. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å –º—ã
    --    –æ–ø—Ä–µ–¥–µ–ª—è–µ–º player.velocity
    --
    -- 3. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (next_x, next_y). –û–¥–Ω–∞–∫–æ
    --    —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –Ω–∞—à—É —Å–≤–æ–±–æ–¥—É üóΩ‚ùå! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–µ
    --    —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –Ω–∏ —Å —á–µ–º. –ê –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, —Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
    --    –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –∫ –º–µ—Å—Ç—É –∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ. –î—Ä—É–≥–∏–º–∏
    --    —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ (2) —Å—Ç–∞–≤–∏—Ç player.velocity, —Ç–æ (3) —Å—Ç–∞–≤–∏—Ç player.x, player.y.
    --    –Ø –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –æ–±—ä—è—Å–Ω—è—é, –º–Ω–µ –Ω–∞–¥–æ–µ–ª–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã. –ß–∏—Ç–∞–π—Ç–µ –∫–æ–¥ —Å–∞–º–∏ üò°!
    --


    -- 1. –ó–∞–ø—Ä–æ—Å—ã. –ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ
    local is_on_ground = Physics.is_on_ground(self)

    local collision_to_the_left = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(self.x - 1, self.y))
    local hugging_left_wall = collision_to_the_left ~= nil

    local collision_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(self.x + 1, self.y))
    local hugging_right_wall = collision_to_the_right ~= nil

    local player_rect = Hitbox.rect_of(self)

    -- –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏–∑–∏—é –ø–ª–æ—Ö–æ–≥–æ —Ç–∞–π–ª–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ is_dead
    --
    -- ‚ö†  –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†
    -- –≠—Ç–æ—Ç –∫–æ–¥ —Å –ø–ª–æ—Ö–∏–º–∏ —Ç–∞–π–ª–∞–º–∏ –Ω–µ –º–æ–π. –¢–∞–∫ —á—Ç–æ –Ω–µ –∂–∞–ª—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ! üò†
    --
    -- ‚ö†  –í–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–æ–Ω—è–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, —è–≤–ª—è—é—â–∏–º—Å—è –∏–Ω–æ–∞–≥–µ–Ω—Ç–æ–º ‚ö†
    -- ‚ö†  –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†
    -- –¢—É—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö —Ä–µ—à–∏–ª —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ—é –≤–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥–∞.
    -- –ù–æ –∫—Ä–æ–º–µ –Ω–µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–æ–¥—É –∏ —Ç–µ–º –±–æ–ª–µ–µ –Ω–µ –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –Ω—ë–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.
    -- –ù–µ—É–∂–µ–ª–∏ –∫—Ç–æ-—Ç–æ –µ—â—ë —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º?
    -- 
    local tiles_that_we_collide_with = Physics.tile_ids_that_intersect_with_rect(self.hitbox:to_rect(self.x,self.y))
    local are_we_in_water = false
    for _, collision in ipairs(tiles_that_we_collide_with) do
        if is_bad_tile(collision.id) then
            --self:die(0, 50)
            --return
            are_we_in_water = true
        end
    end

    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å self.velocity
    local walking_right = is_held_down(CONTROLS.right)
    local walking_left = is_held_down(CONTROLS.left)
    local looking_down = is_held_down(CONTROLS.look_down)
    local looking_up = is_held_down(CONTROLS.look_up)
    local jump_pressed = was_just_pressed(CONTROLS.jump)
    local jump_held_down = is_held_down(CONTROLS.jump)
    local attack_pressed = was_just_pressed(CONTROLS.attack)

    if jump_pressed then
        self.jump_buffer_time = PLAYER_JUMP_BUFFER_TIME
    end

    if attack_pressed and self.attack_cooldown == 0 then
        self.attack_buffer_time = PLAYER_ATTACK_BUFFER_TIME
        if not is_on_ground then
            self.has_attacked_in_air = true
        else
            self.has_attacked_in_air = false
        end

        self.has_attacked_downward = false
        self.has_attacked_upwards = false
        if looking_down then
            self.has_attacked_downward = true
        elseif looking_up then
            self.has_attacked_upwards = true
        end
    end

    if self.attack_timer == 0 then
        self.just_attacked = false
        self.attack_rects = {}
        if attack_pressed then
            self.attack_buffer_time = PLAYER_ATTACK_BUFFER_TIME
        end
        if self.attack_cooldown == 0 and self.attack_buffer_time > 0 then
            self.animation_controller:reset_animation()
            self.attack_timer = PLAYER_ATTACK_DURATION
            self.attack_buffer_time = 0.0
            Basic.play_sound(SOUNDS.PLAYER_ATTACK)
        end
    end



    if is_on_ground then
        self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_FRICTION * Time.dt()
    else
        -- –¢–∏–ø–∞ –≤ –≤–æ–∑–¥—É—Ö–µ –¥—Ä—É–≥–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ üí®
        -- –ù–µ –∑–Ω–∞—é, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω—É–∂–Ω–æ üòÖ
        self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_AIR_FRICTION * Time.dt()
    end

    local not_at_speed_limit = math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED
    if not_at_speed_limit then
        if walking_right then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x + PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        if walking_left then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x - PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        self.velocity.x = math.clamp(self.velocity.x, -PLAYER_MAX_HORIZONTAL_SPEED, PLAYER_MAX_HORIZONTAL_SPEED)
    end

    if not is_on_ground then
        local gravity_scale = 1
        if self.velocity.y > 0 and not jump_held_down and not self.we_jumped_off_a_panda then
            gravity_scale = PLAYER_GRAVITY_SCALE_WHEN_NOT_HOLDING
        end
        if self.remove_horizontal_speed_limit_time == 0.0 then
            self.velocity.y = self.velocity.y - gravity_scale * PLAYER_GRAVITY * Time.dt()
        else
            self.velocity.y = self.velocity.y - gravity_scale * PLAYER_GRAVITY_AFTER_WALL_JUMP * Time.dt()
        end
    end

    local has_jumped = false
    local has_walljumped = false
    local should_jump = self.jump_buffer_time > 0.0

    -- 2.5 üåü –ù–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ üåü 
    -- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã –∞—Ç–∞–∫–∏ –±–ª–æ–∫–∞ –≤ –ø–æ—Ç–µ–Ω—Ü–∞–ª—å–Ω–æ –∏–º–±–æ–≤—É—é —Å–∏–ª—É –ø–æ–ª—ë—Ç–∞ ‚ùó
    -- –≠—Ç–∞ —Ñ–∏—á–∞ –≤–∑–æ—Ä–≤—ë—Ç –Ω–∞—à–∏—Ö —Ñ–∞–Ω–∞—Ç–æ–≤! ü§©üôÑ
    -- –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞:
    -- * –±–æ–ª–µ–µ —Å–ª–∞–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
    -- * –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∫–æ—ë—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∏–Ω–≥
    -- –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —ç—Ç–∞ —Ñ–∏—á–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º, –ø–æ—Å–∫–æ–ª—å–∫—É –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    -- –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏–º –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã,
    -- —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç—ã–º –∏–≥—Ä–æ–∫–∞–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥–Ω–∏
    --
    if is_on_ground and attack_pressed and self.has_attacked_downward then
        -- –î–æ—Ä–æ–≥–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫: 
        --
        -- 1 –¥–µ–Ω—å:
        -- –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–æ–¥–µ. –ü–æ–∫–∞ —Å–¥–µ–ª–∞—é mwp
        --
        -- 2 –¥–µ–Ω—å:
        -- –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –≤–æ–¥–æ–π - –∑–∞—Ç–æ –ø–æ–ª—É—á–∏–ª—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–Ω–∏—Ö–æ–ø. –ó–≤—É—á–∏—Ç –∑–¥–æ—Ä–æ–≤–æ
        -- –°–∞–º–æ–µ –∫–ª–∞—Å—Å–Ω–æ–µ, —á—Ç–æ –æ–Ω –¥–∞–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∏–≥—Ä–æ–∫–∞
        --
        -- –≤–µ—á–µ—Ä 2 –¥–µ–Ω—å –±–∞–Ω–∏—Ö–æ–ø–∞:
        -- –ù–µ—Ç, –ø–æ–ª—É—á–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±–∞–Ω–∏—Ö–æ–ø. –ù–µ –±–∞–≥, –∞ —Ñ–∏—á–∞
        -- 
        -- –Ω–æ—á—å 2 –¥–µ–Ω—å:
        -- –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —Ç–∞–π–º–∏–Ω–≥(–ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ —Ç–∞–π–º–∏–Ω–≥–µ)
        --
        -- –¥–µ–Ω—å 12:
        -- —Ä–µ—à–∏–ª —Å–ø—Ä–æ—Å–∏—Ç—å —É –∞–≤—Ç–æ—Ä–∞, –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç, —Ü–∏—Ç–∞—Ç–∞: "–Ø –æ—Ç–∫—É–¥–∞ –∑–Ω–∞—é".
        --
        -- ^-- –∞–≤—Ç–æ—Ä –≤ —Ç–æ –≤—Ä–µ–º—è –±—ã–ª –≤ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–Ω–∞—á–µ –±—ã –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª "üòÑüåä"
        --
        -- 35 –¥–µ–Ω—å:
        -- –†–∞–∑–æ–±—Ä–∞–ª—Å—è, —á—Ç–æ –¥–∞ –∫–∞–∫, –¥—É–º–∞—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ –¥–ª—è 1000000-—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –º–æ–Ω–æ–ª–∏—Ç–∞
        -- –§–∏—á–∞ —É—Ö–æ–¥–∏—Ç –≤ —Ä–µ–ª–∏–∑
        --
        self.velocity.y = PLAYER_DOWNWARD_ATTACK_JUMP_STRENGTH
        has_jumped = true
    end
    -- –ù—É –¥–∞, –≤–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –æ–±—ã—á–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ª–µ–≥–∫–æ.

    if should_jump then
        if is_on_ground and self.velocity.y <= 0 then
            if are_we_in_water then
                -- Im under the water. Haha
                self.velocity.y = PLAYER_SLOWDOWN_IN_WATER_PERCENTAGE * PLAYER_JUMP_STRENGTH
            else
                self.velocity.y = PLAYER_JUMP_STRENGTH
            end
            has_jumped = true
        elseif hugging_left_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
            has_walljumped = true
        elseif hugging_right_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = -1 * PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
            has_walljumped = true
        end
    end
    if jump_pressed and self.coyote_time > 0.0 and self.velocity.y <= 0.0 then
        self.velocity.y = PLAYER_JUMP_STRENGTH
        has_jumped = true
    end
    if has_jumped then
        self.coyote_time = 0.0
        self.jump_buffer_time = 0.0
        Basic.play_sound(SOUNDS.PLAYER_JUMP)
    end

    if is_on_ground then
        if self.velocity.y == 0 then
            self.we_jumped_off_a_panda = false
        end
        if not self.was_on_ground_last_frame then
            Effects.add(self.x, self.y, SPRITES.particle_effects.land)
        end
    end

    if not is_on_ground and self.was_on_ground_last_frame and self.velocity.y <= 0 then
       self.coyote_time = PLAYER_COYOTE_TIME
    end
    self.was_on_ground_last_frame = is_on_ground

    local can_stick_to_wall = self.velocity.y <= 0
    local sliding_on_wall = false
    if not is_on_ground and can_stick_to_wall then
        if hugging_left_wall and self.velocity.x < 0 or
           hugging_right_wall and self.velocity.x > 0 then
            self.velocity.y = -1 * PLAYER_WALL_SLIDE_SPEED
            sliding_on_wall = true
        end
    end
    if self.was_sliding_on_wall_last_frame and not sliding_on_wall then
        Basic.play_sound(SOUNDS.MUTE_CHANNEL_ONE)
    elseif not self.was_sliding_on_wall_last_frame and sliding_on_wall then
        Basic.play_sound(SOUNDS.PLAYER_SLIDE)
    end
    self.was_sliding_on_wall_last_frame = sliding_on_wall


    if math.abs(self.velocity.x) < PLAYER_MIN_HORIZONTAL_VELOCITY then
        self.velocity.x = 0
    end
    if math.abs(self.velocity.y) < PLAYER_MIN_VERTICAL_VELOCITY then
        self.velocity.y = 0
    end

    self.velocity.y = math.clamp(self.velocity.y, -PLAYER_MAX_FALL_SPEED, PLAYER_MAX_FALL_SPEED)

    if self.velocity.x > 0 then
        self.looking_left = false
    elseif self.velocity.x < 0 then
        self.looking_left = true
    end


    if are_we_in_water then
        self.velocity.x = self.velocity.x * PLAYER_SLOWDOWN_IN_WATER_PERCENTAGE
    end

    -- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π. –£–∂–µ –Ω–µ —Ç–∞–∫ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –≤—ã–Ω–µ—Å –∫–æ–¥ –≤ Physics
    local horizontal_collision = Physics.move_x(self)
    if horizontal_collision ~= nil then
        self.velocity.x = 0
    end

    local vertical_collision = Physics.move_y(self)
    if vertical_collision ~= nil then
        self.velocity.y = 0
    end

    -- –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, –≤–æ—à–ª–∏ –ª–∏ –º—ã –≤ –¥–æ–º. –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ —Å —ç—Ç–∏–º–∏ –¥–æ–º–∞–º–∏!
    local function reveal_any_house_at(tile_x, tile_y)
        if table.contains(HOUSE_DOORS_INSIDE, mget(tile_x, tile_y)) then
            local house = get_house_at(tile_x, tile_y)
            if house ~= nil then
                house:reveal(tile_x, tile_y)
            end
            return true
        end
        return false
    end
    local tile_x, tile_y = Basic.world_to_tile(player_rect:center_x(), player_rect:center_y())
    local we_are_inside_of_a_house = get_house_at(tile_x, tile_y) ~= nil
    if not we_are_inside_of_a_house then
        hide_all_houses()
    end
    reveal_any_house_at(tile_x, tile_y)
    reveal_any_house_at(tile_x - 1, tile_y)
    reveal_any_house_at(tile_x + 1, tile_y)
    reveal_any_house_at(tile_x - 2, tile_y)
    reveal_any_house_at(tile_x + 2, tile_y)

    -- –ê—Ç–∞–∫–∞
    if self:is_attacking() then
        local attack_direction_x = 0
        local attack_direction_y = 0
        if looking_down then
            attack_direction_y = attack_direction_y + 1
        elseif looking_up then
            attack_direction_y = attack_direction_y - 1
        else
            if self.looking_left then
                attack_direction_x = attack_direction_x - 1
            else
                attack_direction_x = attack_direction_x + 1
            end
        end

        local attack_width = 8 + 4 * math.abs(attack_direction_x)
        local attack_height = 8 + 4 * math.abs(attack_direction_y)
        local attack_x = player_rect:center_x() - attack_width / 2 + attack_direction_x * 8
        local attack_y = player_rect:center_y() - attack_height / 2 + attack_direction_y * 8

        -- –°–º–æ—Ç—Ä–µ—Ç—å issue #39
        if self.velocity.x < 0 then
            attack_x = attack_x - 2
        elseif self.velocity.x > 0 then
            attack_x = attack_x + 2
        end
        if not is_on_ground and looking_down then
            attack_y = attack_y + 2
        end

        local attack_rect = Rect:new(attack_x, attack_y, attack_width, attack_height)


        -- –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ ü§Æ
        self.attack_rects = {attack_rect, player_rect}

        local hit_pandas = {}
        for _, panda in ipairs(game.current_level.pandas) do
            local panda_rect = Hitbox.rect_of(panda)
            for _, rect in ipairs(self.attack_rects) do
                if Physics.check_collision_rect_rect(rect, panda_rect) then
                    table.insert(hit_pandas, panda)
                    break
                end
            end
        end

        if #hit_pandas > 0 then
            game.camera:shake(PLAYER_ATTACK_SHAKE_MAGNITUDE, PLAYER_ATTACK_SHAKE_DURATION)

            if looking_down then
                self.velocity.y = PLAYER_JUMP_BY_HIT
                self.we_jumped_off_a_panda = true
            end

            for _, panda in ipairs(hit_pandas) do
                if panda.state == PANDA_STATE.dashing then
                    goto next_iteration
                end

                -- –Ø –ø–æ–ª–æ–∂—É –∑–¥–µ—Å—å –Ω–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É, –∫–∞–≤–∞–∏-–≥–æ–ø–ª–∏—Ç –Ω–µ –∑–∞–º–µ—Ç–∏—Ç –≥—Ä—è–∑–Ω—ã–π –∫–æ–¥,
                -- –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –æ–∫—Ä—É–∂–µ–Ω –æ–±—à–∏—Ä–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏üòâ
                -- –¥–∞ –∏ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ–ø–∞–ª–∞, —Ç—É—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∫ —á–µ–º—É –ø—Ä–∏–¥—Ä–∞—Ç—å—Å—èüòé
                -- –∫—Ö–º, —Ç–∞–∫ –≤–æ—Ç - –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–µ –±–∞–º–±—É–∫–∞
                if panda.kantugging_friend_panda then

                    ClickerMinigame:init(panda)
                    return
                end
                panda:take_damage(attack_direction_x, attack_direction_y)

                ::next_iteration::
            end
            self.attack_timer = 0
        end

        if not self.just_attacked then
            self.just_attacked = true
            if attack_direction_y > 0 then
                self.attack_effect = ChildBody:new(self, 8 * attack_direction_x, 8 * attack_direction_y, SPRITES.particle_effects.downward_attack)
            elseif attack_direction_y < 0 then
                self.attack_effect = ChildBody:new(self, 0, -16, SPRITES.particle_effects.upward_attack)
            else
                local flip = (attack_direction_x < 0) and 1 or 0
                self.attack_effect = ChildBody:new(self, 8 * attack_direction_x, -8 + 8 * attack_direction_y, SPRITES.particle_effects.horizontal_attack, flip)
            end
            self.attack_effect_time = PLAYER_ATTACK_EFFECT_DURATION
            self.attack_cooldown = PLAYER_ATTACK_COOLDOWN
        end

        for _, rect in ipairs(self.attack_rects) do
            local start_tx, start_ty = rect.x // 8, rect.y // 8
            local end_tx, end_ty = (rect.x + rect.w - 1) // 8, (rect.y + rect.h - 1) // 8
            
            for ty = start_ty, end_ty do
                for tx = start_tx, end_tx do
                    local tile = mget(tx, ty)
                    if tile >= 144 and tile <= 149 or tile >= 160 and tile <= 175 then
                        spread_leaves(attack_direction_x, attack_direction_y, tx, ty)
                    end
                end
            end
        end
    end

   
    -- –ê–Ω–∏–º–∞—Ü–∏—è–º–∏ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –∑–¥–µ—Å—å üè≠
    -- –ó–∞–º–µ—Ç–∫–∞ –¥–ª—è –º–µ–Ω—è –∏–∑ –±—É–¥—É—â–µ–≥–æ:
    -- –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∞–≥ —Å —Ç–µ–º, —á—Ç–æ —Å–ø—Ä–∞–π—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ. –¢–∞–∫ –±—ã–ª–æ
    -- –≤ –ø–∞–Ω–¥–∞—Ö, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –æ–¥–∏–Ω –æ–±—â–∏–π —Å–ø—Ä–∞–π—Ç –Ω–∞ –≤—Å–µ—Ö, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—à–ª–æ—Å—å
    -- –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.
    if has_jumped then
        if has_walljumped then
            -- –ù–∞–≤–µ—Ä–Ω–æ–µ –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –≤–æ–æ–±—â–µ –±—É–¥—É—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã. –ü–æ–∫–∞
            -- —á—Ç–æ –∂–µ —Ç—É—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ü™Ñ
            if self.looking_left then
                Effects.add(self.x + 2, self.y, SPRITES.particle_effects.jump)
            else
                Effects.add(self.x + 1, self.y, SPRITES.particle_effects.jump)
            end
        else
            Effects.add(self.x, self.y, SPRITES.particle_effects.jump)
        end
    end

    if self.attack_timer > 0 then
        if self.has_attacked_downward then
            self.animation_controller:set_sprite(SPRITES.player.attack_air_downward)
        elseif self.has_attacked_upwards then
            self.animation_controller:set_sprite(SPRITES.player.attack_upwards)
        elseif self.has_attacked_in_air then
            self.animation_controller:set_sprite(SPRITES.player.attack_air_forward)
        else
            self.animation_controller:set_sprite(SPRITES.player.attack)
        end
    elseif sliding_on_wall then
        self.animation_controller:set_sprite(SPRITES.player.slide)
    elseif self.velocity.y < 0 and not is_on_ground then
        self.animation_controller:set_sprite(SPRITES.player.falling)
    elseif self.velocity.y ~= 0 or not is_on_ground then
        self.animation_controller:set_sprite(SPRITES.player.jump)
    elseif self.time_we_have_been_running > 0.1 and self.velocity.x ~= 0 then
        self.animation_controller:set_sprite(SPRITES.player.running)
    else
        self.animation_controller:set_sprite(SPRITES.player.idle)
    end

    -- –£ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –º–Ω–æ–≥–æ –≤–µ—â–µ–π, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (—Ç–∞–π–º–µ—Ä–æ–≤).
    -- –û–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç—É—Ç, –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ.
    self.jump_buffer_time = Basic.tick_timer(self.jump_buffer_time)
    self.coyote_time = Basic.tick_timer(self.coyote_time)
    self.remove_horizontal_speed_limit_time = Basic.tick_timer(self.remove_horizontal_speed_limit_time)
    self.attack_timer = Basic.tick_timer(self.attack_timer)
    self.attack_buffer_time = Basic.tick_timer(self.attack_buffer_time)
    self.attack_effect_time = Basic.tick_timer(self.attack_effect_time)
    self.attack_cooldown = Basic.tick_timer(self.attack_cooldown)
    if self.velocity.x ~= 0 then
        self.time_we_have_been_running = self.time_we_have_been_running + Time.dt()
    else
        self.time_we_have_been_running = 0
    end
end

function Player:draw()
    if self.hide then
        return
    end

    local flip = self.looking_left and 1 or 0

    local tx, ty = game.camera:transform_coordinates(self.x, self.y)
    --ty = ty - 8 * (self.animation_controller:current_animation().height - 1)

    for _, attack_rect in ipairs(self.attack_rects) do
        -- –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ—á–µ–º—É?
        --if attack_rect.y < Hitbox.rect_of(self).y - 2 then
        --    flip = flip + 2
        --end
    end

    self.animation_controller:draw(tx, ty, flip)
    self.animation_controller:next_frame()

    if self.attack_effect_time > 0 then
        self.attack_effect:draw()
    end

    if self.is_dead then
        self.hat:draw()
    end

    --for _, attack_rect in ipairs(self.attack_rects) do
    --   attack_rect:draw(2)
    --end
end

Player.__index = Player
