-- –í game –µ—Å—Ç—å –µ—â—ë –º–Ω–æ–≥–æ –ø–æ–ª–µ–π, –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ game.init, game.restart, —Ç.–¥.
game = {
    state = GAME_STATE_LANGUAGE_SELECTION,
    language = 'ru',
    CRUTCH_dialog_window = {},
    animated_tiles = {},
    houses = {},
    triggers = {},
    scale = 1,

    tile_info = {},
    coordinates_to_tile_info = {},
}

if DEV_MODE_ENABLED then
    game.state = GAME_STATE_GAMEPLAY
end

function game.init()
    -- –ê —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–∏–¥ ü§î? `os.time()` –≤ —Ç–∏–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    -- math.randomseed(69420)
    --
    -- –û—Ç–≤–µ—Ç: –≤ —Ç–∏–∫–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –∑–∞–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π
    -- —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –Ø —ç—Ç–æ –Ω–∞—à—ë–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ
    -- —Ç–∏–∫–∞. ü§ì

    game.dialog_window = DialogWindow:new(100,50,"dcs")

    game.save_special_tile_information()

    game.restart()
end

function game.save_special_tile_information()
    for row = 0, WORLD_TILEMAP_HEIGHT do
        for col = 0, WORLD_TILEMAP_WIDTH do
            local x, y = Basic.tile_to_world(col, row) -- –ö—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ col, –ø–æ—Ç–æ–º row! ‚òùÔ∏è

            local tile_id = mget(col, row)

            for _, tile_sprite in ipairs(ANIMATED_TILES) do
                local animation = tile_sprite.animation_sequence[1]
                if table.contains(animation.frames, tile_id) then
                    table.insert(game.animated_tiles, {x = col, y = row, animation_controller = AnimationController:new(tile_sprite) })
                    goto skip_loop
                end
            end

            if is_tile_a_house(col, row) then
                local already_saved_this_house = false
                for _, house in ipairs(game.houses) do
                    if house.tiles[col] ~= nil and house.tiles[col][row] then
                        already_saved_this_house = true
                        break
                    end
                end
                if already_saved_this_house then
                    -- 2025 still no continue üò≠
                    -- –ö–æ—Ä–æ—á–µ, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å continue, –Ω–æ, –≤–∏–¥–∏–º–æ,
                    -- –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö lua –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å continue, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–∞—Ä—Å–µ—Ä
                    -- —Å–ª–æ–º–∞–ª—Å—è –Ω–∞ —ç—Ç–æ–º.
                    goto skip_loop
                end

                local new_house = create_a_house_by_bfs_from(col, row)
                table.insert(game.houses, new_house)
                goto skip_loop
            end

            local this_tile_info = nil

            for _, special_tile in ipairs(SPECIAL_TILES) do
                if special_tile.id == tile_id then
                    this_tile_info = {type = special_tile.type, x = x, y = y}
                end
            end

            if this_tile_info ~= nil then
                table.insert(game.tile_info, this_tile_info)

                if game.coordinates_to_tile_info[col] == nil then
                    game.coordinates_to_tile_info[col] = {}
                end
                game.coordinates_to_tile_info[col][row] = #game.tile_info

                -- –í–æ—Ç —Å —ç—Ç–∏–º –∫–æ–Ω–µ—á–Ω–æ –≤—Å—ë –≥—Ä—É—Å—Ç–Ω–æ. –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞–π–ª, –∏–Ω–∞—á–µ
                -- –æ–Ω —Ç–æ—Ä—á–∏—Ç –Ω–µ–∫—Ä–∞—Å–∏–≤–æ –Ω–∞ –∫–∞—Ä—Ç–µ, —ç—Ç–æ –Ω–µ –¥–µ–ª–æ. –ù–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ —É–±–µ—Ä–µ–º,
                -- –º—ã –ø–æ—Ç–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ —Ç–æ–º, —á—Ç–æ —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ —Å–ø–∞–≤–Ω–∏—Ç—Å—è –ø–∞–Ω–¥–∞.
                -- –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ—É –≤ game.tile_info. –£–¥–æ–±–Ω–æ –¥–ª—è
                -- –¥–∏–∑–∞–π–Ω–µ—Ä–∞, –Ω–µ—É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞! –ö–∞–∫–æ–π –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞—Ç—å?
                --
                -- ü§î –û—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤ —ç—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!
                mset(col, row, 0)
            end

            ::skip_loop::
        end
    end
end

-- –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–≤–Ω-—Ç–∞–π–ª—ã –≤ –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏,
-- (x1, y1) - –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª, (x2, y2) - –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
-- –û–±–∞ —É–≥–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
function game.restart_in_area(tile_x1, tile_y1, tile_x2, tile_y2)
    -- –ó–∞—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    game.current_level = {
        pandas = {},
    }

    spawned_things = {}

    for col = tile_x1, tile_x2 do
        for row = tile_y1, tile_y2 do
            if game.coordinates_to_tile_info[col] ~= nil then
                local idx = game.coordinates_to_tile_info[col][row]
                if idx ~= nil then
                    game.spawn_object_by_tile_info(game.tile_info[idx])
                end
            end
        end
    end

    return spawned_things
end

function game.spawn_object_by_tile_info(tile_info)
    if table.contains(PANDA_TYPE, tile_info.type) then
        table.insert(game.current_level.pandas, Panda:new(tile_info.x, tile_info.y, tile_info.type, false))
    else
        error('Invalid tile info type: ' .. tile_info.type)
    end
end

function game.restart()
    game.player = Player:new()

    -- –í—Å—è –∫–∞—Ä—Ç–∞: 240 x 136
    game.restart_in_area(0, 0, 240, 136)

    --for _, tile_info in ipairs(game.tile_info) do
    --    game.spawn_object_by_tile_info(tile_info)
    --end

    -- TODO: –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º?
    -- TriggerTiles.add(TriggerTile:new(24,88,8,8, TriggerActions.dialogue))
    game.bike = Bike:new(190*8, 12*8)
    table.insert(game.triggers, game.bike)

    game.camera = Camera:new(game.player)
    game.parallaxscrolling = ParallaxScrolling:new()
end

function game.update()
    if game.state == GAME_STATE_LANGUAGE_SELECTION then
        if btnp(BUTTON_Z) then
            game.state = GAME_STATE_GAMEPLAY
        end
        if btnp(BUTTON_RIGHT) or btnp(BUTTON_LEFT) then
            if game.language == 'ru' then
                game.language = 'en'
            else
                game.language = 'ru'
            end
        end
        draw_language_selection_boxes()
    elseif game.state == GAME_STATE_PAUSED then
        game.dialog_window:update()
        game.dialog_window:draw()
    elseif game.state == GAME_STATE_RIDING_BIKE then
        game.draw_map()
        game.bike:init_go_away()
        game.bike:go_away()
        game.bike:draw()
    elseif game.state == GAME_STATE_TRIGGERED then
        game.draw_map()
        --for _, dialog_window in ipairs(game.CRUTCH_dialog_window) do
        --    dialog_window:update()
        --end
        for _, dialog_window in ipairs(game.CRUTCH_dialog_window) do
            dialog_window:draw()
        end
    elseif game.state == GAME_STATE_CLICKERMINIGAME then
        game.draw_map()
        game.camera:update()
        -- –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –∑–∞–≤–∏—Å–∞–ª–∏, –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–∏—Ö –æ—Å–æ–±—ã—Ö update
        ClickerMinigame:update()
        ClickerMinigame:draw()
    elseif game.state == GAME_STATE_GAMEPLAY then
        game.dialog_window:update()
        game.player:update()
        game.bike:update()
        TriggerTiles.update()
        game.camera:update()
        for _, panda in ipairs(game.current_level.pandas) do
            panda:update()
        end
        game.parallaxscrolling:update()
        update_psystems()

        game.draw_map()
        for _, panda in ipairs(game.current_level.pandas) do
            panda:draw()
        end
        Effects.draw()
        --game.bike:draw()
        for _, house in ipairs(game.houses) do
            house:draw()
        end
        game.player:draw()
        game.bike:draw()
        TriggerTiles.draw()
        game.dialog_window:draw()
        draw_psystems()
        game.animate_tiles()
        Debug.draw()
    else
        error('Invalid game state!')
    end

    Time.update()
end

function game.animate_tiles()
    for _, animated_tile in ipairs(game.animated_tiles) do
        local animation = animated_tile.animation_controller
        animation:next_frame()
        mset(animated_tile.x, animated_tile.y, animation:current_frame())
    end
end

function game.draw_map()
    -- –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ—á–µ–∫ –ª–µ–≥–∞—Å–∏, –ø–æ–º–∏–º–æ Body, —á—Ç–æ –æ—Å—Ç–∞–ª—Å—è
    -- –∏–∑ –±—É–º–µ—Ä–∞–Ω–≥–∞. –Ø –µ–≥–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω–∏–º–∞—é –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ö–æ—á—É
    -- —Ç—Ä–æ–≥–∞—Ç—å. –≠—Ç–æ –±—É–¥–µ—Ç –ø–∞–º—è—Ç–Ω–∏–∫ –Ω–∞—à–µ–º—É —Ç—Ä—É–¥—É –Ω–∞–¥ –±—É–º–µ—Ä–∞–Ω–≥–æ–º ü™É

    
    -- –∞ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å —Ä–µ–ª–∏–∫–≤–∏—é –≤–∏–¥–∏–º–æ –ø—Ä–∏–¥—ë—Ç—Å—è...


    local cx = game.camera.x
    local cy = game.camera.y
    local tx = math.floor(cx/8)
    local ty = math.floor(cy/8)

    local gmx = tx - math.floor(SCREEN_WIDTH / 16)
    local gmsx = 8 * tx - cx
    local gmy = ty - math.floor(SCREEN_HEIGHT / 16)
    local gmsy = math.floor(8 * ty - cy)
    cls(0)
    game.parallaxscrolling:draw()
    map(gmx, gmy, 31, 18, gmsx, gmsy,0)
end
