--[[

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—É—Ç–Ω–∏–∫! –í–∏–∂—É, —Ç—ã —É—Å—Ç–∞–ª —Å –¥–æ—Ä–æ–≥–∏?
–ü—Ä–∏—Å—è–¥—å, –æ—Ç–¥–æ—Ö–Ω–∏ –≤ –º–æ–µ–º —É—é—Ç–Ω–æ–º —Ñ–∞–π–ª–µ.

–°–Ω–∏–º–∞–π —Å–≤–æ—ë –ø–∞–ª—å—Ç–æ –∏ —Å–∞–¥–∏—Å—å –∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

–Ø —É–≥–æ—â—É —Ç–µ–±—è –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏, –∏ –Ω–∞–ø–æ—é –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–º –∫–æ–¥–æ–º
–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, —á—Ç–æ –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –º–æ–µ–≥–æ –¥–æ–º–∞. –ó–∞ –µ–¥–æ–π —è –ø–æ–≤–µ–¥–∞—é —Ç–µ–±–µ
–∏—Å—Ç–æ—Ä–∏–∏ –æ –º–µ—Ä–∂ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –∏ —Å–æ–∑–≤–æ–Ω–∞—Ö –∏–∑ –º–æ–∏—Ö –¥–µ—Ç—Å–∫–∏—Ö –ª–µ—Ç. –ú—ã –±—É–¥–µ–º —Ç–∏—Ö–æ
–±–æ–ª—Ç–∞—Ç—å –ø—Ä–∏ —Ç—É—Å–∫–ª–æ–º —Å–≤–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ –≤—Å—è–∫–∏—Ö –ø—É—Å—Ç—è–∫–∞—Ö: —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö,
SOLID, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞—Ö... Ô∏èüïØÔ∏è

–ü–æ—Ç–æ–º —è —É–ª–æ–∂—É —Ç–µ–±—è —Å–ø–∞—Ç—å, –Ω–∞–∫—Ä—ã–≤ —Ç–µ–±—è —Ç–µ–ø–ª—ã–º –º–æ–Ω–æ–ª–∏—Ç–æ–º. –ò —Å–ø–æ—é —Ç–µ–±–µ
–∫–æ–ª—ã–±–µ–ª—å–Ω—É—é üåú:

    –°–ø—è—Ç —É—Å—Ç–∞–ª—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ–±—ä–µ–∫—Ç—ã —Å–ø—è—Ç.
    –°–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∂–¥—É—Ç —Ä–µ–±—è—Ç.
    –î–∞–∂–µ –õ–∏–Ω—É—Å —Å–ø–∞—Ç—å –ª–æ–∂–∏—Ç—Å—è,
    –ß—Ç–æ–±—ã –Ω–æ—á—å—é –Ω–∞–º –ø—Ä–∏—Å–Ω–∏—Ç—å—Å—è.
    –¢—ã –µ–º—É –ø–æ–∂–µ–ª–∞–π:
    –ë–∞—é-–±–∞–π.

–£—Ç—Ä–æ–º —è –ø–æ–¥–Ω–∏–º—É —Ç–µ–±—è —Ä–∞–Ω–æ –∏ –∑–∞—Å—Ç–∞–≤–ª—é —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É: –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫,
–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Å–Ω–æ —á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ. üéã

–ò—Å–ø–µ–∫—É –∑–∞–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞–Ω–∫—É –∏ —Å–¥–µ–ª–∞—é –≥–æ—Ä—è—á–µ–≥–æ —à–æ–∫–æ–∫–æ–¥–∞.

–ü–æ—Ç–æ–º —è –ø—Ä–∏–≥–ª–∞—à—É —Ç–µ–±—è –Ω–∞ —Ä—ã–±–∞–≥–ª–∫—É. –Ø –≤–æ–∑—å–º—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∞ —Ç—ã -- –±–∞–≥–æ–ª–æ–≤–Ω—ã–µ —Å–Ω–∞—Å—Ç–∏.
–ù–∞–¥–µ—é—Å—å –Ω–∞ —Ö–æ—Ä–æ—à–∏–π —É–ª–æ–≤!

–†—ã–±–∞—á–∏–º. –¢–∏—Ö–∏–π –≤–µ—Ç–µ—Ä–æ–∫ –∫–æ–ª—ã—à–µ—Ç —Å—Ç—Ä–æ—á–∫–∏ –∫–æ–¥–∞: –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞–≥—Ä–µ–ª—Å—è. –ñ—É—Ä—á–∏—Ç —Ç–µ–∫—É—â–∞—è –ø–∞–º—è—Ç—å.
–í–æ–∫—Ä—É–≥ –ª–µ—Ç–∞—é—Ç –±–∞–≥–±–æ—á–∫–∏, –º—É—Ä–∞–≤—å–∏ —Ü–µ–ø–æ—á–∫–æ–π –ø–æ–ª–∑—É—Ç –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ö–≤–∞–∫–∞–µ—Ç –¥–∂–∞–±–∞.
–ú—ã —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ —Å–∏–¥–∏–º –Ω–∞ –±–µ—Ä–µ–≥—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è –º–æ–º–µ–Ω—Ç–æ–º. –î–∞, –Ω–µ—á–∞—Å—Ç–æ –≤—ã–¥–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π
—Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω–µ–∫. –£ –º–µ–Ω—è –∫–ª—é–µ—Ç: —Ç—è–Ω—É, —Ç—è–Ω—É, –µ—â—ë —á—É—Ç—å-—á—É—Ç—å... –≠—Ç–æ –º–æ–Ω–æ–∫–∞—Ä–ø! üêü

–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —É–∂–µ –∫ –≤–µ—á–µ—Ä—É. –ù–∞ –≥–∏—Ç—Ö–∞–±–µ —É —Ç–µ–±—è 5 –Ω–æ–≤—ã—Ö issues: –¥–µ–ª –Ω–µ–≤–ø—Ä–æ–≤–æ—Ä–æ—Ç.
–ü–æ—Ö–æ–∂–µ, –Ω–∞—à–µ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. –ß—Ç–æ –∂, –Ω–∞–¥–µ—é—Å—å —Ç–µ–±–µ –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è –Ω–∞—à–µ –º–∞–ª–µ–Ω—å–∫–æ–µ
–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ó–∞–ø–æ–º–Ω–∏: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–≤–æ—è —Ç—è–∂–∫–∞—è –Ω–æ—à–∞ –∏–∑ –ª–µ–≥–∞—Å–∏ –æ–ø—è—Ç—å —Å—Ç–∞–Ω–µ—Ç –Ω–µ–≤—ã–Ω–æ—Å–∏–º–∞,
—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ –º–æ—ë–º —Å–∫—Ä–æ–º–Ω–æ–º —É–±–µ–∂–∏—â–µ.

–ü—Ä–æ—â–∞–π! üëã

--]]

Panda = {}

-- –ö–æ–≥–¥–∞ —É–∂–µ –≤ lua –¥–æ–±–∞–≤—è—Ç enum-—ã? üò©
local PANDA_STATE = {
    patrol = 1,
    chase = 2,
    charging_dash = 3,
    charging_basic_attack = 4,
    doing_basic_attack = 5,
    dashing = 6,
    staggered = 7,
    stunned = 8,
    sleeping = 9,
}

local PANDA_STATE_COLORS = {0, 9, 0, 0, 0, 0, 0, 0}

function Panda:new(x, y, panda_type, can_tug)
    panda_type = panda_type or PANDA_TYPE.basic
    can_tug = can_tug or false
    local default_state = panda_type == PANDA_TYPE.basic and PANDA_STATE.patrol or PANDA_STATE.sleeping
    local object = {
        x = x,
        y = y,
        velocity = {
            x = 0,
            y = 0,
        },
        hitbox = Hitbox:new(1, 0, 6, 8),
        physics_settings = PANDA_PHYSICS_SETTINGS,

        type = panda_type,
        state = default_state,

        health = PANDA_SETTINGS[panda_type].health,

        stun_animation = AnimationController:new(SPRITES.panda_stun_effect),
        animation_controller = AnimationController:new(SPRITES.panda[PANDA_TYPE.basic].rest),
        look_direction = math.coin_flip() and 1 or -1,

        attack_effect = nil,       -- –ú–Ω–µ –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è, —á—Ç–æ –≤ –ø–∞–Ω–¥–µ –ø–ª–æ–¥—è—Ç—Å—è —Ç–∞–∫–∏–µ –ø–æ–ª—è
        attack_effect_time = 0.0,  -- –∏ —Ç–∞–∫–∏–µ...

        -- –ö–∞–∫ –∂–µ —è –æ–±–æ–∂–∞—é —Ç–∞–π–º–µ—Ä—ã üòç
        time_of_most_recent_hit = 0.0,
        count_of_recent_hits = 0,

        time_after_which_we_should_attack = 0.0,
        time_since_dashing = 0.0,

        chase_time_left = 0.0,
        patrol_rest_time = 0.0,
        stagger_time_left = 0.0,
        stun_time_left = 0.0,
        basic_attack_time_left = 0.0,
        change_look_direction_cooldown = 0.0,

        -- –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ—Ç—è–≥–∞—Ç—å—Å—è —Å —Ç–∞–∫–æ–π –ø–∞–Ω–¥–æ–π?üôÑ –û—Ç–≤–µ—Ç –±—ã–ª –¥–∞–Ω –≤—ã—à–µ
        --kantugging_friend_panda = can_tug,
        kantugging_friend_panda = false,
    }

    setmetatable(object, self)
    return object
end

function Panda:view_cone_shape()
    local rect = Hitbox.rect_of(self)

    local tx, ty = rect:center_x(), rect:center_y()

    if self.look_direction == -1 then
        tx = tx - PANDA_VIEW_CONE_WIDTH / 2
    else
        tx = tx + PANDA_VIEW_CONE_WIDTH / 2
    end

    ty = ty - PANDA_VIEW_CONE_HEIGHT / 2
    tx = tx - PANDA_VIEW_CONE_WIDTH / 2

    local look_ahead_rect = Rect:new(tx, ty, PANDA_VIEW_CONE_WIDTH, PANDA_VIEW_CONE_HEIGHT)
    PANDA_BACK_VIEW = 20
    local a_bit_behind_rect = Rect:new(
        self.x - PANDA_BACK_VIEW,
        self.y - PANDA_BACK_VIEW / 2,
        2 * PANDA_BACK_VIEW,
        PANDA_BACK_VIEW
    )

    return Shape:new({look_ahead_rect, a_bit_behind_rect})
end

function Panda:die()
    Basic.play_sound(SOUNDS.PANDA_DEAD)
    table.remove_element(game.current_level.pandas, self)
end

-- –∫—Ç–æ —É–±–µ—Ä–µ—Ç, —Ç–æ—Ç —Å–∞–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–¥ –º–∏–Ω–∏–∏–≥—Ä—ã
function Panda:set_dieable_state()
    self.state = PANDA_STATE.stunned
end

function Panda:take_damage(hit_x, hit_y)
    local blood_count = math.lerp(100, 10, self.health / PANDA_SETTINGS[self.type].health)

    self.health = self.health - 1

    -- if death by grief for the lost bamboo
    hit_x = hit_x or 0
    hit_y = hit_y or 0

    Basic.play_sound(SOUNDS.PANDA_HIT)

    if hit_x < 0 then
        create_blood(self.x, self.y, -1, blood_count)
    elseif hit_x > 0 then
        create_blood(self.x, self.y, 1, blood_count)
    else
        create_blood(self.x, self.y, -1, blood_count)
        create_blood(self.x, self.y, 1, blood_count)
    end

    local stun_knockback_direction_x = hit_x < 0 and -1 or 1
    local stun_knockback_direction_y = hit_y < 0 and PANDA_STUN_KNOCKBACK_VERTICAL_FROM_VERTICAL_ATTACK or PANDA_STUN_KNOCKBACK_VERTICAL

    if self.health == PANDA_SETTINGS[self.type].health_at_which_to_get_stunned then
        self.state = PANDA_STATE.stunned
        self.stun_time_left = PANDA_STUN_DURATION

        --
        -- –ê–ê–•–•–ê–•–ê–•–ê–•–ê –Ø –°–û–®–Å–õ –° –£–ú–ê ü•∂ üò∑
        --
        self.time_of_most_recent_hit = Time.now()
        self.stun_time_left = PANDA_STUN_DURATION

        self.velocity.x = stun_knockback_direction_x * PANDA_STUN_KNOCKBACK_HORIZONTAL
        self.velocity.y = stun_knockback_direction_y
    else
        self.state = PANDA_STATE.stunned
        self.stun_time_left = self.stun_time_left + PANDA_SMALL_STUN_DURATION

        self.velocity.x = stun_knockback_direction_x * PANDA_SMALL_STUN_KNOCKBACK_HORIZONTAL
        self.velocity.y = stun_knockback_direction_y
    end

    if self.health <= 0 then
        self:die()
    end
end

function Panda:update()
    --
    -- –ò –≤–µ–¥—å –±—É–¥—É—Ç –∂–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–º –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –æ–Ω–∏ –∑–∞–π–¥—É—Ç,
    -- –ø—Ä–æ–ª–∏—Å—Ç–∞—é—Ç –∫–æ–¥, –∏ —Å–∫–∞–∂—É—Ç: "–ë–æ–∂–µ, –∫–∞–∫–æ–π –∫–æ—à–º–∞—Ä!" –°–∫–∞–∂—É—Ç, —á—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–µ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–æ–µ
    -- –Ω–µ—á–∏—Ç–∞–µ–º–æ–µ —Å–≤–µ—Ä—Ö-—Å—Ç—Ä–∞—à–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ–∑–Ω–∞–Ω–∏–∏
    -- –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Å–∏–ª–∏—Ç—å.
    --
    -- –•–º... ü§î
    --
    -- –ò –ø–æ—Ç–æ–º –±—É–¥—É—Ç –µ—â—ë –≥–æ–≤–æ—Ä–∏—Ç—å: "–≠–π, kawaii-Code, —Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —É–º–µ–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å,
    -- –≤–æ—Ç —ç—Ç–æ–π –ø–∞–Ω–¥–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥–æ–π–¥–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω ``–°—Ç—Ä–∞—Ç–µ–≥–∏—è'', –≤–æ—Ç —Å –Ω–∏–º –±—ã –±—ã–ª–æ –±—ã –Ω–µ —Ç–∞–∫
    -- —Å—Ç—Ä–∞—à–Ω–æ!" –ê –ø–æ—Ç–æ–º –µ—â—ë: "–ù—É —Ç—ã –±—ã —Ö–æ—Ç—è –±—ã –≤—ã–Ω–µ—Å —Ç—É—Ç –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–Ω–æ –∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ
    -- –Ω–µ —á–∏—Ç–∞–µ–º–æ!" –ò –æ–Ω–∏ –≤—Å–µ –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –≥–æ—Ä–¥—ã–µ, –≤–µ–¥—å, –≤–æ—Ç –æ–Ω–∏, –≤–∏–¥—è—Ç –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥
    -- –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ —á–µ–º —Ç–æ—Ç, –∫—Ç–æ –±—ã–ª –¥–æ –Ω–∏—Ö. –û–Ω–∏ –æ—Ç–∫–∞–∂—É—Ç—Å—è –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏, –≤–µ–¥—å
    -- "–ù—É –Ω–∞–≥–æ–≤–Ω–æ–∫–æ–∂–µ–Ω–æ!" –∏ –∑–∞–ø—Ä–æ—Å—è—Ç –±–æ–ª—å—à–æ–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥. "–¢—É—Ç –Ω–∞–¥–æ –≤—Å—ë –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Å –Ω—É–ª—è."
    --
    -- –ê–≥–∞... üôÇ
    -- 
    -- –ò –≤–µ–¥—å –æ–Ω–∏ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä—è—Ç! –û–Ω–∏ —Å–¥–µ–ª–∞—é—Ç –º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é.
    -- –ë—É–¥–µ—Ç –∫–ª–∞—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è —Ñ–∏–∑–∏—á–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –ø–∞–Ω–¥—ã –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–º. –ë—É–¥–µ—Ç –∫–ª–∞—Å—Å
    -- –∞—Ç–∞–∫–∏, —Ç–∞–º —Ç–æ–∂–µ –≤—Å—ë –±—É–¥–µ—Ç –º–∏–ª–æ. –ò –±—É–¥–µ—Ç –∫–ª–∞—Å—Å —Å–∞–º–æ–π –ø–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –≤–æ—Ç —ç—Ç–∏
    -- –≤–æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ–º–µ–Ω—å—à–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏—Ö —Å–≤–µ—Ä—Ö—É. –ò–ª–∏ –∂–µ –æ–Ω–∏ —Å–¥–µ–ª–∞—é—Ç
    -- state –º–∞—à–∏–Ω—É, –≤–µ–¥—å —Ç—É—Ç "–æ–Ω–∞ –ø—Ä—è–º–æ –ø—Ä–æ—Å–∏—Ç—Å—è, –≤–æ—Ç —É —Ç–µ–±—è –ø–æ–ª–µ state!" –ò –≤—Å—é –ª–æ–≥–∏–∫—É,
    -- —Ä–∞–∑–ª–æ–∂–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤ if-–∞—Ö, –æ–Ω–∏ —Ä–∞—Å–ø–∏—Ö–∞—é—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–∞–º, –¥–∞–∂–µ –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º!
    -- –í–µ–¥—å —Ç–∞–∫ –±—É–¥–µ—Ç "–ß–∏—Å—Ç—ã–π –ö–æ–¥ (tm)."
    --
    -- –£–≥—É... üòê
    --
    -- –ü–æ—Ç–æ–º, –ø–æ—Å–ª–µ –¥–Ω—è, –æ—Ç–Ω—è—Ç–æ–≥–æ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–∞ –≤–µ–¥—å –Ω–µ –¥–∞–π –±–æ–≥ –±–æ–ª—å—à–µ), –æ–Ω–∏ —Å—è–¥—É—Ç,
    -- –≤–∑–≥–ª—è–Ω—É—Ç –Ω–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —Å–∫–∞–∂—É—Ç: "–í–æ—Ç —Ç–µ–ø–µ—Ä—å —Ö–æ—Ä–æ—à–æ!" –ò –¥–æ–≤–æ–ª—å–Ω—ã–µ —Å—è–¥—É—Ç
    -- –ø–∏—Å–∞—Ç—å –Ω–∞–∫–æ–Ω–µ—Ü –Ω–æ–≤—É—é —Ñ–∏—á—É.
    --
    -- –≠—Ö..... üò´
    --
    -- –ò –æ–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, —á—Ç–æ –∫–æ–¥–∞ —Ç–æ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –±—ã–ª–æ –∑–¥–µ—Å—å, –≤ –æ–≥—Ä–æ–º–Ω–æ–º update-–µ.
    -- –ü—Ä–æ—Å—Ç–æ –æ–Ω —Ç–µ–ø–µ—Ä—å —Ä–∞—Å–∫–∏–¥–∞–Ω –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ, —è –Ω–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å,
    -- —Ö–æ—Ä–æ—à–æ –Ω–∞–∑–≤–∞–Ω—ã, –≤–µ–¥—å –æ–Ω–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—é—Ç —Ç–∞–∫ –º–Ω–æ–≥–æ –∏–º–µ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ –∑–∞ –¥–µ–Ω—å!
    -- –û–Ω–∏ —Ç–∞–∫ –∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, –∫–∞–∫ —É–≥—Ä–æ–±–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä—É —Ä–∞–∑. "–î–∞ –º—ã –∏ —Ç–∞–∫ –≤ lua,
    -- —Ç—É—Ç –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞, –∫–∞–∫–æ–π –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å?" –ê –ø–æ—Ç–æ–º —É –Ω–∏—Ö –∏–≥—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ª–∞–≥–∞–µ—Ç, –≤–µ–¥—å
    -- –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Ç—ã—Å—è—á–∏ –ø–æ—Ä–µ–∑–æ–≤. –û–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, —á—Ç–æ, –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ
    -- –∏—Ö –∫–æ–¥ —Å—Ç–∞–ª –ú–ï–ù–ï–ï —á–∏—Ç–∞–µ–º—ã–º! –ù—É —Ç–æ –µ—Å—Ç—å –æ–Ω –ö–ê–ñ–ï–¢–°–Ø –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º, –≤–µ–¥—å —Å–º–æ—Ç—Ä–∏—Ç–µ,
    -- –∫–∞–∫ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞–∑–≤–∞–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ —ë–º–∫–æ, –≤–µ–∑–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ 5 —Å—Ç—Ä–æ—á–µ–∫! –ù–æ –º–Ω–µ, —á—Ç–æ–±—ã
    -- —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫–æ–≥–æ —Ö—Ä–µ–Ω–∞ –ø–∞–Ω–¥–∞ –≤–Ω–µ–∑–∞–ø–Ω–æ –º–µ–Ω—è–µ—Ç —Å–ø—Ä–∞–π—Ç –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –∞—Ç–∞–∫–∏, –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä—ã—Ç—å
    -- –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫—Ä—ã—Ç–∞ –∫—É—á–∞ —Ñ—É–Ω–∫—Ü–∏–π! –¢–æ –µ—Å—Ç—å –ø–æ–ª–æ—Ç–Ω–∏—â–µ, –∫–∞–∫ —É –º–µ–Ω—è –∑–¥–µ—Å—å,
    -- —è –º–æ–≥—É —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. –î–∞, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –Ω–æ –±–ª–∏–Ω,
    -- –•–û–†–û–®–û –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–¢–¨ = –ü–†–ò–õ–ê–ì–ê–¢–¨ –£–°–ò–õ–ò–Ø.
    -- –§–∞–Ω–∞—Ç—ã –û–û–ü –ø—Ä—è—á—É—Ç –∫—É—á—É –º—É—Å–æ—Ä–∞ –ø–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–π –æ–±—ë—Ä—Ç–∫–æ–π –∏ —Ç–µ–ø–µ—Ä—å –∏–º -> –ü–†–û–°–¢–û <-, —Ö–æ—Ç—è –ø–æ
    -- —Å—É—Ç–∏ –æ–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—Ä–∞–≤–¥–∞–Ω–Ω–æ —É—Å–ª–æ–∂–Ω–∏–ª–∏ –∫–æ–¥, –Ω–æ –∏–º –ö–ê–ñ–ï–¢–°–Ø –ø—Ä–æ—â–µ. –í–æ—Ç –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è
    -- –∏–∑–º–µ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞, –ø–æ—á–∏—Ç–∞–π—Ç–µ:
    -- https://www.researchgate.net/publication/220636945_On_the_Cognitive_Complexity_of_Software_and_its_Quantification_and_Formal_Measurement
    -- –ò –≤–µ–¥—å —Å–∞–º–∞ –∏–¥–µ—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ö–æ—Ä–æ—à–∞, –º—ã —á–∞—Å—Ç–æ —Ö–æ—Ç–∏–º —Å–≤—è–∑–∞—Ç—å –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –Ω–æ
    -- –∏–∑-–∑–∞ –∞–±—å—é–∑–∞ —ç—Ç–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è AbstractFactoryFactory, –∞ –∫—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ
    -- —Ç–∞–∫–∏–º –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è, —Ç–æ—Ç —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–µ—Ä–∏—Ç –≤ —Ö–æ—Ä–æ—à–µ—Å—Ç—å
    -- —ç—Ç–∏—Ö Clean Code –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –∞ –æ–Ω–∏ –∫ —ç—Ç–æ–º—É —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –ø—Ä–∏–≤–µ–¥—É—Ç.
    --
    -- –í—Å—ë –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –º–µ—Ä—É. –¢—É—Ç –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –±—ã –¥–µ–π—Å—Ç–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π,
    -- –Ω–æ –≤ –Ω–µ—É–º–µ–ª—ã—Ö —Ä—É–∫–∞—Ö –ø–∞—Ä–∞ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π –ª–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ–≥—Ä–æ–º–Ω–æ–µ –∞—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ —á—É–¥–∏—â–µ ü¶ç
    -- –ò –º–æ–∏ —Ä—É–∫–∏ –Ω–µ—É–º–µ–ª—ã.
    --
    -- –Ø —Ä–∞–Ω—å—à–µ –ø–∏—Å–∞–ª –û–û–ü-—à–Ω—ã–π –∫–æ–¥. –ê –ø–æ—Ç–æ–º —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å. –£ –º–µ–Ω—è
    -- –ø—Ä–∏–±–∞–≤–∏–ª–∞—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —è –æ–±—Ä–µ–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞, –∞
    -- —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –≤—ã—Ä–æ—Å–ª–∞. –≠—Ç–æ –ø–æ–∫–∞ —á—Ç–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ —Å–∞–º–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ, —á—Ç–æ —Ç–æ–ª—å–∫–æ
    -- –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–∞–∫ —ç—Ç–æ "–ß–∏—Å—Ç–æ—Ç–∞ –ö–æ–¥–∞." –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞—É–∫–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    -- –ò–ù–ñ–ï–ù–ï–†–ù–ê–Ø, –Ω–µ –∑—Ä—è –æ–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Software Engineering. –ù—É–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å. –ò–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    -- –∫–æ–¥–∞, –∏–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏—á, –∏–∑–º–µ—Ä—è—Ç—å
    -- "—Å–ª–æ–∂–Ω–æ—Å—Ç—å" –∏–ª–∏ "–ø—Ä–æ—Å—Ç–æ—Ç—É" –∫–æ–¥–∞. –ß—Ç–æ –±—É–¥–µ—Ç –ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Ç–æ –∏ –µ—Å—Ç—å "–ß–∏—Å—Ç—ã–π –ö–æ–¥."
    --
    -- –ê –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ -- –º—É—Å–æ—Ä ‚ôªÔ∏è, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–±–∏–≤–∞—Ç—å –≥–æ–ª–æ–≤—É.
    --
    -- 
    --
    -- rewiew #1 spü§ìkynerd@sysiphus.jam
    -- –ü–æ–Ω—è—Ç–Ω–æ, –µ—â—ë –æ–¥–∏–Ω –∏–Ω—Ñ–æ—Ü–∏–≥–∞–Ω –Ω–∞—à–µ–ª—Å—è.
    -- –ù–∞—á–∏–Ω–∞—è —á–∏—Ç–∞—Ç—å, —è –ø–æ–¥—É–º–∞–ª, –î–∞ - –Ω–∞–≤–µ—Ä–Ω–æ–µ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —á–µ—Ä–µ–∑ —Å–µ–±—è,
    -- –º–Ω–æ–≥–æ –¥—É–º–∞–ª –Ω–∞ —ç—Ç–æ—Ç —Å—á—ë—Ç, —Ä–µ—à–∏–ª –¥–æ–Ω–µ—Å—Ç–∏ —Å–≤–æ—é –º—ã—Å–ª—å –¥–æ –ª—é–¥–µ–π –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ.
    -- –ê –æ–∫–∞–∑–∞–ª–æ—Å—å...
    -- –û–ø—è—Ç—å –ø—Ä–µ—Å–ª–æ–≤—É—Ç–∞—è —Ä–µ–∫–ª–∞–º–∞ —Å–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.!
    -- –ò –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ —Ç–µ–π–∫–∞ - –≤—Å—ë —Ç–µ –∂–µ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
    -- –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏(—Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç - –ø–µ—Ä–µ–≤—ë–ª, –Ω–µ –ø–æ–ª–µ–Ω–∏–ª—Å—è);
    -- –ò –∫–∞–∫ –æ–±—ã—á–Ω–æ –ø–æ–¥ –ø—Ä–µ–¥–ª–æ–≥–æ–º –Ω–∞—É–∫–∏! –î–∞ –∫–∞–∫–æ–µ —ç—Ç–æ –≤–∞—à–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É–∫–∞.
    -- Software engineering –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ —Ç—ã–∫–∞–Ω—å–µ
    -- –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ SE —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –¥–∞—ë—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω,
    -- —á—Ç–æ –µ–º—É –Ω–∞–¥–æ –Ω–∞—Ç—ã–∫–∞—Ç—å, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ç.–¥.
    -- –¢–∏–ø–∏—á–Ω–∞—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è... –ù—É –∞ —á–µ–≥–æ –µ—â—ë —è –æ–∂–∏–¥–∞–ª...
    -- –õ–∞–¥–Ω–æ –±—ã —Ä–µ–∫–ª–∞–º–∞ —Å–¥–µ–ª–∞–Ω–∞ —Ö–æ—Ä–æ—à–æ, —Ç–µ–∫—Å—Ç-—Ç–æ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ø–ª—è–µ—Ç!
    -- –¢–∞–∫ –¥–∞–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã –Ω–µ—Ç...
    -- –ó–∞–º–∏–Ω—É—Å–∏—Ç–µ —á–µ–ª–∞ –ø–∂ - –¥–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —Ä–µ–∫–ª–∞–º—É, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–º–æ—Ç—Ä–∏–º –ª—É—á—à–µ
    -- –ü–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è,
    -- –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ kawai@sysiphus.jam

    local player = game.player

    local our_rect = Hitbox.rect_of(self)
    local player_rect = Hitbox.rect_of(player)

    local is_on_ground = Physics.is_on_ground(self)

    local view_cone = self:view_cone_shape()
    local sees_player = Physics.check_collision_shape_rect(view_cone, Hitbox.rect_of(player))

    if self.state == PANDA_STATE.patrol then

        if self.patrol_rest_time > 0.0 then
            self.patrol_rest_time = Basic.tick_timer(self.patrol_rest_time)
            self.velocity.x = 0
            if self.patrol_rest_time == 0.0 then
                self:set_look_direction(-1 * self.look_direction)
            end
        else
            local x_in_the_near_future = self.x + self.look_direction * PANDA_PATROL_PIXELS_UNTIL_STOP

            local wall_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y)) ~= nil
            local ground_forward = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y + 1)) ~= nil

            if wall_to_the_right or not ground_forward then
                self.patrol_rest_time = PANDA_REST_TIME_BEFORE_DIRECTION_CHANGE()
            end

            -- ü§î
            self.velocity.x = PANDA_SETTINGS[self.type].patrol_speed * self.look_direction
        end

        if sees_player then
            self.state = PANDA_STATE.chase
            self.chase_time_left = PANDA_SETTINGS[self.type].chase_duration
        end

    elseif self.state == PANDA_STATE.chase then

        if sees_player then
            self.chase_time_left = PANDA_SETTINGS[self.type].chase_duration
        end

        local can_attack_the_player = false
        if self.time_after_which_we_should_attack > 0.0 then
            self.time_after_which_we_should_attack = Basic.tick_timer(self.time_after_which_we_should_attack)
            can_attack_the_player = self.time_after_which_we_should_attack == 0.0
        end

        local x_distance_to_player = math.abs(player_rect:center_x() - our_rect:center_x())
        local y_distance_to_player = math.abs(player_rect:center_y() - our_rect:center_y())

        self:set_look_direction(math.sign(player_rect:center_x() - our_rect:center_x()))

        local should_we_chase_the_player = true

        if x_distance_to_player <= PANDA_X_DISTANCE_TO_PLAYER_UNTIL_BASIC_ATTACK and y_distance_to_player <= PANDA_Y_DISTANCE_TO_PLAYER_UNTIL_BASIC_ATTACK then
            if can_attack_the_player then
                Basic.play_sound(SOUNDS.PANDA_BASIC_ATTACK_CHARGE)
                self.state = PANDA_STATE.charging_basic_attack
            elseif self.time_after_which_we_should_attack == 0.0 then
                self.time_after_which_we_should_attack = PANDA_SETTINGS[self.type].delay_after_starting_chase_before_attacking
            end
        elseif is_on_ground and x_distance_to_player <= PANDA_X_DISTANCE_TO_PLAYER_UNTIL_DASH then
            if can_attack_the_player then
                if y_distance_to_player <= PANDA_Y_DISTANCE_TO_PLAYER_UNTIL_DASH then
                    Basic.play_sound(SOUNDS.PANDA_DASH_CHARGE)
                    self.state = PANDA_STATE.charging_dash
                    self.charging_dash_time_left = PANDA_SETTINGS[self.type].dash_charge_duration
                else
                    -- –ú—ã —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∫ –∏–≥—Ä–æ–∫—É –ø—Ä—ã–≥–Ω—É—Ç—å
                    Basic.play_sound(SOUNDS.PANDA_JUMP)
                    self.velocity.y = PANDA_CHASE_JUMP_STRENGTH
                end
                should_we_chase_the_player = false
            elseif self.time_after_which_we_should_attack == 0.0 then
                self.time_after_which_we_should_attack = PANDA_SETTINGS[self.type].delay_after_starting_chase_before_attacking
            end
        end

        if x_distance_to_player <= PANDA_MIN_X_DISTANCE_TO_PLAYER then
            should_we_chase_the_player = false
        end

        if should_we_chase_the_player then
            local x_in_the_near_future = self.x + self.look_direction * PANDA_CHASE_PIXELS_UNTIL_JUMP
            local x_direction_to_player = math.sign(player_rect:center_x() - our_rect:center_x())

            local wall_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y)) ~= nil

            if is_on_ground and wall_to_the_right then
                Basic.play_sound(SOUNDS.PANDA_JUMP)
                self.velocity.y = PANDA_CHASE_JUMP_STRENGTH
            end
            self.velocity.x = PANDA_SETTINGS[self.type].chase_speed * x_direction_to_player
        end

        self.chase_time_left = Basic.tick_timer(self.chase_time_left)
        if self.chase_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
            self.patrol_rest_time = PANDA_REST_TIME_BEFORE_DIRECTION_CHANGE()
        end

    elseif self.state == PANDA_STATE.charging_dash then

        self.charging_dash_time_left = Basic.tick_timer(self.charging_dash_time_left)
        if self.charging_dash_time_left == 0.0 then
            Basic.play_sound(SOUNDS.PANDA_DASH)
            self.state = PANDA_STATE.dashing

            self.time_since_dashing = 0.0
            self.velocity.x = PANDA_SETTINGS[self.type].dash_strength * self.look_direction
        end

    elseif self.state == PANDA_STATE.charging_basic_attack then

        self:set_look_direction(player_rect:center_x() < our_rect:center_x() and -1 or 1)

        if self.animation_controller:is_at_last_frame() then
            if self.basic_attack_time_left == 0.0 then
                local attack_width = 22
                local attack_rect = Rect:new(
                    our_rect:center_x() + 8 * self.look_direction - attack_width / 2,
                    our_rect:top(),
                    attack_width,
                    8
                )

                -- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ hurtbox –∞—Ç–∞–∫–∏ –ø–∞–Ω–¥—ã.
                --Debug.add(function()
                --    attack_rect:draw(2)
                --    our_rect:draw(2)
                --end)

                if Physics.check_collision_rect_rect(our_rect, player_rect) then
                    player:die(self.look_direction, 0)
                elseif Physics.check_collision_rect_rect(attack_rect, player_rect) then
                    player:die(self.look_direction, 0)
                end

                Basic.play_sound(SOUNDS.PANDA_BASIC_ATTACK)

                local flip = (self.look_direction < 0) and 1 or 0
                self.attack_effect = ChildBody:new(
                    self,
                    8 * (self.look_direction - flip),
                    -8 * (self.animation_controller:current_animation().height - 1),
                    SPRITES.particle_effects.horizontal_attack,
                    flip
                )
                self.attack_effect_time = PANDA_BASIC_ATTACK_EFFECT_DURATION
                self.basic_attack_time_left = PANDA_BASIC_ATTACK_DURATION
            else
                self.basic_attack_time_left = Basic.tick_timer(self.basic_attack_time_left)
                if self.basic_attack_time_left == 0.0 then
                    self.state = PANDA_STATE.chase
                end
            end
        end

    elseif self.state == PANDA_STATE.dashing then

        if self.animation_controller:is_at_last_frame() then
            if self.basic_attack_time_left == 0.0 then
                local flip = (self.look_direction < 0) and 1 or 0
                self.attack_effect = ChildBody:new(
                    self,
                    8 * (self.look_direction - flip),
                    -8 * (self.animation_controller:current_animation().height - 1),
                    SPRITES.particle_effects.horizontal_attack,
                    flip
                )
                self.attack_effect_time = PANDA_BASIC_ATTACK_EFFECT_DURATION
                self.basic_attack_time_left = PANDA_BASIC_ATTACK_DURATION
            else
                local attack_width = 22
                local attack_rect = Rect:new(
                    our_rect:center_x() + 8 * self.look_direction - attack_width / 2,
                    our_rect:top(),
                    attack_width,
                    8
                )

                -- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ hurtbox –∞—Ç–∞–∫–∏ –ø–∞–Ω–¥—ã.
                --Debug.add(function()
                --    attack_rect:draw(2)
                --    our_rect:draw(2)
                --end)

                if Physics.check_collision_rect_rect(our_rect, player_rect) then
                    player:die(self.look_direction, 0)
                elseif Physics.check_collision_rect_rect(attack_rect, player_rect) then
                    player:die(self.look_direction, 0)
                end

                self.basic_attack_time_left = Basic.tick_timer(self.basic_attack_time_left)
                if self.basic_attack_time_left == 0.0 then
                    self.state = PANDA_STATE.chase
                end
            end
        end

        if Physics.check_collision_rect_rect(our_rect, player_rect) then
            game.player:die(self.velocity.x, self.velocity.y)
        end

        self.time_since_dashing = self.time_since_dashing + Time.dt()

        if is_on_ground and self.time_since_dashing > PANDA_SETTINGS[self.type].dash_duration then
            self.state = PANDA_STATE.chase
        end
        self.chase_time_left = Basic.tick_timer(self.chase_time_left)

    elseif self.state == PANDA_STATE.staggered then

        self.stagger_time_left = Basic.tick_timer(self.stagger_time_left)
        if self.stagger_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
        end

    elseif self.state == PANDA_STATE.stunned then

        self.stun_time_left = Basic.tick_timer(self.stun_time_left)
        if self.stun_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
        end

    elseif self.state == PANDA_STATE.sleeping then

        -- –°–ø–∏–º :)
        if self.type == PANDA_TYPE.agro then
            self.state = PANDA_STATE.patrol
            -- –ù–µ —Å–ø–∏–º >:(
        end

    else

        error('Invalid panda state!') -- ‚úÇ

    end

    Physics.update(self)


    local tile_ids = Physics.tile_ids_that_intersect_with_rect(our_rect)
    for _, collision in ipairs(tile_ids) do
        if is_bad_tile(collision.id) then
            create_blood(self.x, self.y, -1)
            create_blood(self.x, self.y, 1)
            self:die()
            return
        end
    end

    local sprites = SPRITES.panda[self.type]

    -- –ü–æ–¥ –∫–æ–Ω–µ—Ü –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Å–ø—Ä–∞–π—Ç–∞–º–∏. –ö–∞–∫ –≤ –∏–≥—Ä–æ–∫–µ! üòÑ
    if self.state == PANDA_STATE.stunned or
       self.state == PANDA_STATE.staggered
    then
        if self.stun_time_left > PANDA_SMALL_STUN_DURATION then
            self.animation_controller:set_sprite(sprites.sleeping)
        else
            -- goto üòé
            goto hitlocked
        end
    end

    if self.state == PANDA_STATE.patrol then
        if self.patrol_rest_time > 0.0 then
            self.animation_controller:set_sprite(sprites.rest)
        else
            self.animation_controller:set_sprite(sprites.walk)
        end
    elseif self.state == PANDA_STATE.charging_basic_attack then
        self.animation_controller:set_sprite(sprites.charging_basic_attack)
    elseif self.state == PANDA_STATE.chase then
        self.animation_controller:set_sprite(sprites.chase)
    elseif self.state == PANDA_STATE.charging_dash then
        self.animation_controller:set_sprite(sprites.charging_dash)
    elseif self.state == PANDA_STATE.dashing then
        self.animation_controller:set_sprite(sprites.dashing)
    elseif self.state == PANDA_STATE.sleeping then
        self.animation_controller:set_sprite(sprites.sleeping)
    end

    self.animation_controller:next_frame()

    ::hitlocked::

    self.attack_effect_time = Basic.tick_timer(self.attack_effect_time)
    self.change_look_direction_cooldown = Basic.tick_timer(self.change_look_direction_cooldown)
end

-- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: -1 –≤–ª–µ–≤–æ, 1 –≤–ø—Ä–∞–≤–æ
function Panda:set_look_direction(new_look_direction)
    if new_look_direction == 0 then
        return
    end

    assert(new_look_direction == 1 or new_look_direction == -1)
    if new_look_direction == self.look_direction then
        return
    end

    if self.change_look_direction_cooldown == 0.0 then
        self.look_direction = new_look_direction
        self.change_look_direction_cooldown = PANDA_CHANGE_LOOK_DIRECTION_COOLDOWN
    end
end

function Panda:draw()
    local flip = (self.look_direction == 1) and 0 or 1

    local tx, ty = game.camera:transform_coordinates(self.x, self.y)

    -- rect(tx, ty - 6, 4, 4, PANDA_STATE_COLORS[self.state])
    if self.type == PANDA_TYPE.chilling then
        -- spr(294, tx + 4, ty - 6, 0)
    end
    -- if self.look_direction == 1 then
    --     rect(tx + 1, ty + 2, 3, 2, PANDA_STATE_COLORS[self.state])
    -- else
    --     rect(tx + 4, ty + 2, 3, 2, PANDA_STATE_COLORS[self.state])
    -- end

    local sprites = SPRITES.panda[self.type]
    if self.state == PANDA_STATE.stunned and self.animation_controller.sprite ~= sprites.sleeping then
        self.stun_animation:draw(tx, ty - 8, flip)
        self.stun_animation:next_frame()
    end

    if self.attack_effect_time > 0.0 then
        self.attack_effect:draw()
    end

    -- –ù—É —Ç–∏–ø –ª–∞–¥–Ω–æ. –í–æ–æ–±—â–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥—É—Ä–∞—Ü–∫–∏–π –∫–æ—Å—Ç—ã–ª—å, –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —ç—Ç–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å.
    -- –≠—Ç–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∏–º–∞—Ü–∏–π
    -- —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.
    --tx = tx - 4 * (self.animation_controller:current_animation().width - 1)
    --ty = ty - 8 * (self.animation_controller:current_animation().height - 1)
    self.animation_controller:draw(tx, ty, flip)
end

Panda.__index = Panda
