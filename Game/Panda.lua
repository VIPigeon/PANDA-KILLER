--[[

–ó–¥–µ—Å—å –Ω–∞—á–∞–ª —Ä–∞–∑–º–Ω–æ–∂–∞—Ç—å—Å—è –≥—Ä—è–∑–Ω–æ–∫–æ–¥ ‚ôªÔ∏è ü§Æ

–ö—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª, —Ç–æ—Ç –æ–±—è–∑–∞–Ω —ç—Ç–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å üöΩ
> –Ø –ø—Ä–æ—á–∏—Ç–∞–ª. –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ —É–±–æ—Ä–∫—É üßΩ
> –£–±—Ä–∞–Ω–æ. –∫–∏–≤–∏-–∫–æ–¥ (c) 2025

--]]

Panda = {}

-- –ö–æ–≥–¥–∞ —É–∂–µ –≤ lua –¥–æ–±–∞–≤—è—Ç enum-—ã? üò©
local PANDA_STATE = {
    patrol = 1,
    chase = 2,
    charging_attack = 3,
    pounce = 4,
    staggered = 5,
    stunned = 6,
}

local PANDA_STATE_COLORS = {2, 3, 4, 5, 7, 6}

function Panda:new(x, y, can_tug)
    CANTUG = can_tug or false
    local object = {
        x = x,
        y = y,
        velocity = {
            x = 0,
            y = 0,
        },
        hitbox = Hitbox:new(2, 0, 4, 8),
        physics_settings = PANDA_PHYSICS_SETTINGS,

        state = PANDA_STATE.patrol,

        sprite = nil,
        sprites = {
            rest = PANDA_SPRITES.rest:copy(),
            patrol = PANDA_SPRITES.walk:copy(),
            chase = PANDA_SPRITES.chase:copy(),
            charging_attack = PANDA_SPRITES.charging_attack:copy(),
            pounce = PANDA_SPRITES.pounce:copy(),
        },
        look_direction = math.coin_flip() and 1 or -1,

        time_of_most_recent_hit = 0.0,
        count_of_recent_hits = 0.0,

        time_since_pounce = 0.0,
        chase_time_left = 0.0,
        patrol_rest_time = 0.0,
        stagger_time_left = 0.0,
        stun_time_left = 0.0,

        kantugging_friend_panda = CANTUG,
    }
    object.sprite = object.sprites.rest

    setmetatable(object, self)
    return object
end

function Panda:view_cone_shape()
    local rect = Hitbox.rect_of(self)

    local tx, ty = rect:center_x(), rect:center_y()

    if self.look_direction == PANDA_LOOK_DIRECTION_LEFT then
        tx = tx - PANDA_VIEW_CONE_WIDTH / 2
    else
        tx = tx + PANDA_VIEW_CONE_WIDTH / 2
    end

    ty = ty - PANDA_VIEW_CONE_HEIGHT / 2
    tx = tx - PANDA_VIEW_CONE_WIDTH / 2

    local look_ahead_rect = Rect:new(tx, ty, PANDA_VIEW_CONE_WIDTH, PANDA_VIEW_CONE_HEIGHT)
    PANDA_BACK_VIEW = 20
    local a_bit_behind_rect = Rect:new(
        self.x - PANDA_BACK_VIEW,
        self.y - PANDA_BACK_VIEW / 2,
        2 * PANDA_BACK_VIEW,
        PANDA_BACK_VIEW
    )

    return Shape:new({look_ahead_rect, a_bit_behind_rect})
end

function Panda:take_damage(hit_x, hit_y)
    Basic.play_sound(SOUNDS.PANDA_HIT)

    if hit_x < 0 then
        create_blood(self.x, self.y, -1)
    elseif hit_x > 0 then
        create_blood(self.x, self.y, 1)
    else
        create_blood(self.x, self.y, -1)
        create_blood(self.x, self.y, 1)
    end

    if self.state == PANDA_STATE.stunned then
        -- –£–º–∏—Ä–∞–µ–º üíÄ
        Basic.play_sound(SOUNDS.PANDA_DEAD)
        table.remove_element(game.pandas, self)
        return
    end

    self.count_of_recent_hits = self.count_of_recent_hits + 1
    self.time_of_most_recent_hit = Time.now()

    local panda_should_get_stunned = self.count_of_recent_hits >= PANDA_HITS_NEEDED_TO_GET_STUNNED
    if panda_should_get_stunned then
        if hit_x < 0 then
            self.velocity.x = -1 * PANDA_STUN_KNOCKBACK_HORIZONTAL
        elseif hit_x > 0 then
            self.velocity.x = PANDA_STUN_KNOCKBACK_HORIZONTAL
        end
        self.velocity.y = PANDA_STUN_KNOCKBACK_VERTICAL

        self.rest_time = 0.0
        self.count_of_recent_hits = 0

        self.state = PANDA_STATE.stunned
        self.stun_time_left = PANDA_STUN_DURATION
    else
        if hit_x < 0 then
            self.velocity.x = -1 * PANDA_KNOCKBACK_HORIZONTAL
        else
            self.velocity.x = PANDA_KNOCKBACK_HORIZONTAL
        end
        self.velocity.y = PANDA_KNOCKBACK_VERTICAL

        self.state = PANDA_STATE.staggered
        self.stagger_time_left = PANDA_STAGGER_DURATION
    end
end

function Panda:update()
    --
    -- –ò –≤–µ–¥—å –±—É–¥—É—Ç –∂–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–º –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –æ–Ω–∏ –∑–∞–π–¥—É—Ç,
    -- –ø—Ä–æ–ª–∏—Å—Ç–∞—é—Ç –∫–æ–¥, –∏ —Å–∫–∞–∂—É—Ç: "–ë–æ–∂–µ, –∫–∞–∫–æ–π –∫–æ—à–º–∞—Ä." –°–∫–∞–∂—É—Ç, —á—Ç–æ —Ç—É—Ç —Ç–∞–∫–æ–µ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–æ–µ
    -- –Ω–µ—á–∏—Ç–∞–µ–º–æ–µ —Å–≤–µ—Ä—Ö-—Å—Ç—Ä–∞—à–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ–∑–Ω–∞–Ω–∏–∏
    -- –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Å–∏–ª–∏—Ç—å.
    --
    -- –•–º... ü§î
    --
    -- –ò –ø–æ—Ç–æ–º –±—É–¥—É—Ç –µ—â—ë –≥–æ–≤–æ—Ä–∏—Ç—å: "–≠–π, kawaii-Code, —Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —É–º–µ–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å,
    -- –≤–æ—Ç —ç—Ç–æ–π –ø–∞–Ω–¥–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥–æ–π–¥–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω ``–°—Ç—Ä–∞—Ç–µ–≥–∏—è'', –≤–æ—Ç —Å –Ω–∏–º –±—ã –±—ã–ª–æ –±—ã –Ω–µ —Ç–∞–∫
    -- —Å—Ç—Ä–∞—à–Ω–æ!" –ê –ø–æ—Ç–æ–º –µ—â—ë: "–ù—É —Ç—ã –±—ã —Ö–æ—Ç—è –±—ã –≤—ã–Ω–µ—Å —Ç—É—Ç –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–Ω–æ –∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ
    -- –Ω–µ —á–∏—Ç–∞–µ–º–æ!" –ò –æ–Ω–∏ –≤—Å–µ –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –≥–æ—Ä–¥—ã–µ, –≤–µ–¥—å, –≤–æ—Ç –æ–Ω–∏, –≤–∏–¥—è—Ç –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥
    -- –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ —á–µ–º —Ç–æ—Ç, –∫—Ç–æ –±—ã–ª –¥–æ –Ω–∏—Ö. –û–Ω–∏ –æ—Ç–∫–∞–∂—É—Ç—Å—è –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏, –≤–µ–¥—å
    -- "–ù—É –Ω–∞–≥–æ–≤–Ω–æ–∫–æ–∂–µ–Ω–æ!" –∏ –∑–∞–ø—Ä–æ—Å—è—Ç –±–æ–ª—å—à–æ–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥. "–¢—É—Ç –Ω–∞–¥–æ –≤—Å—ë –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Å –Ω—É–ª—è."
    --
    -- –ê–≥–∞... üôÇ
    -- 
    -- –ò –≤–µ–¥—å –æ–Ω–∏ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä—è—Ç! –û–Ω–∏ —Å–¥–µ–ª–∞—é—Ç –º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é.
    -- –ë—É–¥–µ—Ç –∫–ª–∞—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è —Ñ–∏–∑–∏—á–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –ø–∞–Ω–¥—ã –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–º. –ë—É–¥–µ—Ç –∫–ª–∞—Å—Å
    -- –∞—Ç–∞–∫–∏, —Ç–∞–º —Ç–æ–∂–µ –≤—Å—ë –±—É–¥–µ—Ç –º–∏–ª–æ. –ò –±—É–¥–µ—Ç –∫–ª–∞—Å—Å —Å–∞–º–æ–π –ø–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –≤–æ—Ç —ç—Ç–∏
    -- –≤–æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ–º–µ–Ω—å—à–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏—Ö —Å–≤–µ—Ä—Ö—É. –ò–ª–∏ –∂–µ –æ–Ω–∏ —Å–¥–µ–ª–∞—é—Ç
    -- state –º–∞—à–∏–Ω—É, –≤–µ–¥—å —Ç—É—Ç "–æ–Ω–∞ –ø—Ä—è–º–æ –ø—Ä–æ—Å–∏—Ç—Å—è, –≤–æ—Ç —É —Ç–µ–±—è –ø–æ–ª–µ state!" –ò –≤—Å—é –ª–æ–≥–∏–∫—É,
    -- —Ä–∞–∑–ª–æ–∂–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤ if-–∞—Ö, –æ–Ω–∏ —Ä–∞—Å–ø–∏—Ö–∞—é—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–∞–º, –¥–∞–∂–µ –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º!
    -- –í–µ–¥—å —Ç–∞–∫ –±—É–¥–µ—Ç "–ß–∏—Å—Ç—ã–π –ö–æ–¥ (tm)."
    --
    -- –£–≥—É... üòê
    --
    -- –ü–æ—Ç–æ–º, –ø–æ—Å–ª–µ –¥–Ω—è, –æ—Ç–Ω—è—Ç–æ–≥–æ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–∞ –≤–µ–¥—å –Ω–µ –¥–∞–π –±–æ–≥ –±–æ–ª—å—à–µ), –æ–Ω–∏ —Å—è–¥—É—Ç,
    -- –≤–∑–≥–ª—è–Ω—É—Ç –Ω–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —Å–∫–∞–∂—É—Ç: "–í–æ—Ç —Ç–µ–ø–µ—Ä—å —Ö–æ—Ä–æ—à–æ!" –ò –¥–æ–≤–æ–ª—å–Ω—ã–µ —Å—è–¥—É—Ç
    -- –ø–∏—Å–∞—Ç—å –Ω–∞–∫–æ–Ω–µ—Ü –Ω–æ–≤—É—é —Ñ–∏—á—É.
    --
    -- –≠—Ö..... üò´
    --
    -- –ò –æ–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, —á—Ç–æ –∫–æ–¥–∞ —Ç–æ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –±—ã–ª–æ –∑–¥–µ—Å—å, –≤ –æ–≥—Ä–æ–º–Ω–æ–º update-–µ.
    -- –ü—Ä–æ—Å—Ç–æ –æ–Ω —Ç–µ–ø–µ—Ä—å —Ä–∞—Å–∫–∏–¥–∞–Ω –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ, —è –Ω–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å,
    -- —Ö–æ—Ä–æ—à–æ –Ω–∞–∑–≤–∞–Ω—ã, –≤–µ–¥—å –æ–Ω–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—é—Ç —Ç–∞–∫ –º–Ω–æ–≥–æ –∏–º–µ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ –∑–∞ –¥–µ–Ω—å!
    -- –û–Ω–∏ —Ç–∞–∫ –∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, –∫–∞–∫ —É–≥—Ä–æ–±–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä—É —Ä–∞–∑. "–î–∞ –º—ã –∏ —Ç–∞–∫ –≤ lua,
    -- —Ç—É—Ç –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞, –∫–∞–∫–æ–π –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å?" –ê –ø–æ—Ç–æ–º —É –Ω–∏—Ö –∏–≥—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ª–∞–≥–∞–µ—Ç, –≤–µ–¥—å
    -- –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Ç—ã—Å—è—á–∏ –ø–æ—Ä–µ–∑–æ–≤. –û–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, —á—Ç–æ, –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ
    -- –∏—Ö –∫–æ–¥ —Å—Ç–∞–ª –ú–ï–ù–ï–ï —á–∏—Ç–∞–µ–º—ã–º! –ù—É —Ç–æ –µ—Å—Ç—å –æ–Ω –ö–ê–ñ–ï–¢–°–Ø –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º, –≤–µ–¥—å —Å–º–æ—Ç—Ä–∏—Ç–µ,
    -- –∫–∞–∫ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞–∑–≤–∞–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ —ë–º–∫–æ, –≤–µ–∑–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ 5 —Å—Ç—Ä–æ—á–µ–∫! –ù–æ –º–Ω–µ, —á—Ç–æ–±—ã
    -- —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫–æ–≥–æ —Ö—Ä–µ–Ω–∞ –ø–∞–Ω–¥–∞ –≤–Ω–µ–∑–∞–ø–Ω–æ –º–µ–Ω—è–µ—Ç —Å–ø—Ä–∞–π—Ç –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –∞—Ç–∞–∫–∏, –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä—ã—Ç—å
    -- –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫—Ä—ã—Ç–∞ –∫—É—á–∞ —Ñ—É–Ω–∫—Ü–∏–π! –¢–æ –µ—Å—Ç—å –ø–æ–ª–æ—Ç–Ω–∏—â–µ, –∫–∞–∫ —É –º–µ–Ω—è –∑–¥–µ—Å—å,
    -- —è –º–æ–≥—É —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. –î–∞, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –Ω–æ –±–ª–∏–Ω,
    -- –•–û–†–û–®–û –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–¢–¨ = –ü–†–ò–õ–ê–ì–ê–¢–¨ –£–°–ò–õ–ò–Ø.
    -- –§–∞–Ω–∞—Ç—ã –û–û–ü –ø—Ä—è—á—É—Ç –∫—É—á—É –º—É—Å–æ—Ä–∞ –ø–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–π –æ–±—ë—Ä—Ç–∫–æ–π –∏ —Ç–µ–ø–µ—Ä—å –∏–º -> –ü–†–û–°–¢–û <-, —Ö–æ—Ç—è –ø–æ
    -- —Å—É—Ç–∏ –æ–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—Ä–∞–≤–¥–∞–Ω–Ω–æ —É—Å–ª–æ–∂–Ω–∏–ª–∏ –∫–æ–¥, –Ω–æ –∏–º –ö–ê–ñ–ï–¢–°–Ø –ø—Ä–æ—â–µ. –í–æ—Ç –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è
    -- –∏–∑–º–µ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞, –ø–æ—á–∏—Ç–∞–π—Ç–µ:
    -- https://www.researchgate.net/publication/220636945_On_the_Cognitive_Complexity_of_Software_and_its_Quantification_and_Formal_Measurement
    -- –ò –≤–µ–¥—å —Å–∞–º–∞ –∏–¥–µ—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ö–æ—Ä–æ—à–∞, –º—ã —á–∞—Å—Ç–æ —Ö–æ—Ç–∏–º —Å–≤—è–∑–∞—Ç—å –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –Ω–æ
    -- –∏–∑-–∑–∞ –∞–±—å—é–∑–∞ —ç—Ç–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è AbstractFactoryFactory, –∞ –∫—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ
    -- —Ç–∞–∫–∏–º –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è, —Ç–æ—Ç —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–µ—Ä–∏—Ç –≤ —Ö–æ—Ä–æ—à–µ—Å—Ç—å
    -- —ç—Ç–∏—Ö Clean Code –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –∞ –æ–Ω–∏ –∫ —ç—Ç–æ–º—É —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –ø—Ä–∏–≤–µ–¥—É—Ç.
    --
    -- –í—Å—ë –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –º–µ—Ä—É. –¢—É—Ç –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –±—ã –¥–µ–π—Å—Ç–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π,
    -- –Ω–æ –≤ –Ω–µ—É–º–µ–ª—ã—Ö —Ä—É–∫–∞—Ö –ø–∞—Ä–∞ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π –ª–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ–≥—Ä–æ–º–Ω–æ–µ –∞—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ —á—É–¥–∏—â–µ ü¶ç
    -- –ò –º–æ–∏ —Ä—É–∫–∏ –Ω–µ—É–º–µ–ª—ã.
    --
    -- –Ø —Ä–∞–Ω—å—à–µ –ø–∏—Å–∞–ª –û–û–ü-—à–Ω—ã–π –∫–æ–¥. –ê –ø–æ—Ç–æ–º —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å. –£ –º–µ–Ω—è
    -- –ø—Ä–∏–±–∞–≤–∏–ª–∞—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —è –æ–±—Ä–µ–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞, –∞
    -- —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –≤—ã—Ä–æ—Å–ª–∞. –≠—Ç–æ –ø–æ–∫–∞ —á—Ç–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ —Å–∞–º–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ, —á—Ç–æ —Ç–æ–ª—å–∫–æ
    -- –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–∞–∫ —ç—Ç–æ "–ß–∏—Å—Ç–æ—Ç–∞ –ö–æ–¥–∞." –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞—É–∫–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    -- –ò–ù–ñ–ï–ù–ï–†–ù–ê–Ø, –Ω–µ –∑—Ä—è –æ–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Software Engineering. –ù—É–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å. –ò–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    -- –∫–æ–¥–∞, –∏–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏—á, –∏–∑–º–µ—Ä—è—Ç—å
    -- "—Å–ª–æ–∂–Ω–æ—Å—Ç—å" –∏–ª–∏ "–ø—Ä–æ—Å—Ç–æ—Ç—É" –∫–æ–¥–∞. –ß—Ç–æ –±—É–¥–µ—Ç –ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Ç–æ –∏ –µ—Å—Ç—å "–ß–∏—Å—Ç—ã–π –ö–æ–¥."
    --
    -- –ê –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ -- –º—É—Å–æ—Ä ‚ôªÔ∏è, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–±–∏–≤–∞—Ç—å –≥–æ–ª–æ–≤—É.
    --

    local player = game.player

    local is_on_ground = Physics.is_on_ground(self)

    local view_cone = self:view_cone_shape()
    local sees_player = Physics.check_collision_shape_rect(view_cone, Hitbox.rect_of(player))

    if self.state == PANDA_STATE.patrol then

        if self.patrol_rest_time > 0.0 then
            self.patrol_rest_time = Basic.tick_timer(self.patrol_rest_time)
            self.velocity.x = 0
            if self.patrol_rest_time == 0.0 then
                self.look_direction = -1 * self.look_direction
            end
        else
            local x_in_the_near_future = self.x + self.look_direction * PANDA_PATROL_PIXELS_UNTIL_STOP

            local wall_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y)) ~= nil
            local ground_forward = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y + 1)) ~= nil

            if wall_to_the_right or not ground_forward then
                self.patrol_rest_time = PANDA_REST_TIME_BEFORE_DIRECTION_CHANGE()
            end

            -- ü§î
            self.velocity.x = PANDA_PATROL_SPEED * self.look_direction
        end

        if sees_player then
            self.state = PANDA_STATE.chase
            self.chase_time_left = PANDA_CHASE_DURATION
        end

    elseif self.state == PANDA_STATE.chase then

        if sees_player then
            self.chase_time_left = PANDA_CHASE_DURATION
        end

        -- Bullshit
        local x_distance_to_player = math.abs(player.x - self.x)
        self.look_direction = math.sign(player.x - self.x)
        if x_distance_to_player <= PANDA_X_DISTANCE_TO_PLAYER_UNTIL_ATTACK then
            Basic.play_sound(SOUNDS.PANDA_ATTACK_CHARGE)
            self.state = PANDA_STATE.charging_attack
            self.charging_attack_time_left = PANDA_ATTACK_CHARGE_DURATION
        else
            local x_in_the_near_future = self.x + self.look_direction * PANDA_CHASE_PIXELS_UNTIL_JUMP
            local x_direction_to_player = math.sign(game.player.x - self.x)

            local wall_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y)) ~= nil
            local ground_forward = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(x_in_the_near_future, self.y + 1)) ~= nil

            if is_on_ground and wall_to_the_right then
                Basic.play_sound(SOUNDS.PANDA_JUMP)
                self.velocity.y = PANDA_CHASE_JUMP_STRENGTH
            end
            self.velocity.x = PANDA_CHASE_SPEED * x_direction_to_player
        end

        self.chase_time_left = Basic.tick_timer(self.chase_time_left)
        if self.chase_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
            self.patrol_rest_time = PANDA_REST_TIME_BEFORE_DIRECTION_CHANGE()
        end

    elseif self.state == PANDA_STATE.charging_attack then

        self.charging_attack_time_left = Basic.tick_timer(self.charging_attack_time_left)
        if self.charging_attack_time_left == 0.0 then
            Basic.play_sound(SOUNDS.PANDA_POUNCE)
            self.state = PANDA_STATE.pounce
            self.time_since_pounce = 0.0

            local y_distance_to_player = math.abs(player.y - self.y)
            if y_distance_to_player <= PANDA_Y_DISTANCE_TO_PLAYER_UNTIL_ATTACK then
                -- –¢—É—Ç –ø—Ä–∏–∫–æ–ª—å–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —á—Ç–æ–±—ã –ø–∞–Ω–¥–∞ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–ª–∞
                -- —É–≥–æ–ª –ø—Ä—ã–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫, –Ω–æ —ç—Ç–æ
                -- –µ—Å–ª–∏ –ì–î –∑–∞—Ö–æ—á–µ—Ç.
                self.velocity.x = 100 * math.sign(player.x - self.x)
                self.velocity.y = 60 * -1 * math.sign(player.y - self.y)
            elseif is_on_ground and player.y < self.y then
                Basic.play_sound(SOUNDS.PANDA_JUMP)
                self.velocity.y = PANDA_CHASE_JUMP_STRENGTH
            end
        end

    elseif self.state == PANDA_STATE.pounce then

        local our_rect = Hitbox.rect_of(self)
        local player_rect = Hitbox.rect_of(game.player)

        if Physics.check_collision_rect_rect(our_rect, player_rect) then
            game.player:die(self.velocity.x, self.velocity.y)
        end

        self.time_since_pounce = self.time_since_pounce + Time.dt()

        if is_on_ground and self.time_since_pounce > PANDA_POUNCE_DURATION then
            self.state = PANDA_STATE.chase
        end
        self.chase_time_left = Basic.tick_timer(self.chase_time_left)

    elseif self.state == PANDA_STATE.staggered then

        self.stagger_time_left = Basic.tick_timer(self.stagger_time_left)
        if self.stagger_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
        end

    elseif self.state == PANDA_STATE.stunned then

        self.stun_time_left = Basic.tick_timer(self.stun_time_left)
        if self.stun_time_left == 0.0 then
            self.state = PANDA_STATE.patrol
        end

    else

        error('Invalid panda state!') -- ‚úÇ

    end

    Physics.update(self)

    if Time.now() - self.time_of_most_recent_hit > PANDA_TIME_INTERVAL_BETWEEN_HITS_FROM_PLAYER then
        self.count_of_recent_hits = 0
    end

    -- –ü–æ–¥ –∫–æ–Ω–µ—Ü –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Å–ø—Ä–∞–π—Ç–∞–º–∏. –ö–∞–∫ –≤ –∏–≥—Ä–æ–∫–µ! üòÑ
    local previous_sprite = self.sprite

    if self.state == PANDA_STATE.stunned or
       self.state == PANDA_STATE.staggered
    then
        -- goto üòé
        goto hitlocked
    end

    if self.state == PANDA_STATE.patrol then
        if self.patrol_rest_time > 0.0 then
            self.sprite = self.sprites.rest
        else
            self.sprite = self.sprites.patrol
        end
    elseif self.state == PANDA_STATE.chase then
        self.sprite = self.sprites.chase
    elseif self.state == PANDA_STATE.charging_attack then
        self.sprite = self.sprites.charging_attack
    elseif self.state == PANDA_STATE.pounce then
        self.sprite = self.sprites.pounce
    end

    if previous_sprite ~= self.sprite then
        self.sprite:reset()
    end
    self.sprite:next_frame()

    ::hitlocked::
end

function Panda:draw()
    local flip = self.look_direction == PANDA_LOOK_DIRECTION_RIGHT and 0 or 1

    local tx, ty = game.camera:transform_coordinates(self.x, self.y)

    rect(tx, ty - 6, 4, 4, PANDA_STATE_COLORS[self.state])

    -- –ù—É —Ç–∏–ø –ª–∞–¥–Ω–æ. –í–æ–æ–±—â–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥—É—Ä–∞—Ü–∫–∏–π –∫–æ—Å—Ç—ã–ª—å, –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —ç—Ç–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å.
    -- –≠—Ç–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∏–º–∞—Ü–∏–π
    -- —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.
    tx = tx - 4 * (self.sprite:current_animation().width - 1)
    ty = ty - 8 * (self.sprite:current_animation().width - 1)
    self.sprite:draw(tx, ty, flip)
end

Panda.__index = Panda
