--[[

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∂—É–Ω–≥–ª–∏! üå¥üêí

–ù–∏–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª–æ—Ç–Ω–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç–∏—Ä–∞–Ω–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–º. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
–≤—Å—è –ª–æ–≥–∏–∫–∞ –ª–µ–∂–∏—Ç –≤ player.update(). –ê —á—Ç–æ? –î—É–º–∞–µ—Ç–µ —ç—Ç–æ –Ω–µ –∫—Ä—É—Ç–æ(–≤–æ–æ–±—â–µ-—Ç–æ –¥–∞ << Nerd), —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–∞—è
—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –µ—â—ë –±–æ–ª—å—à–µ –≤ –±—É–¥—É—â–µ–º? –í–æ—Ç —á—Ç–æ –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫ (ü§Ø) —Å–∫–∞–∑–∞–ª
–±—ã –≤–∞–º: https://cbarrete.com/carmack.html

–ù–µ –∑–Ω–∞–µ—Ç–µ –∫—Ç–æ —Ç–∞–∫–æ–π –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫? –ü–æ–∑–æ—Ä. –ù–µ, —Ä–µ–∞–ª—å–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ —ç—Ç–æ ü§¨.
–ò —Å—Ç–∞—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ.

–ù–µ –≤–µ—Ä–∏—Ç–µ —ç—Ç–æ–º—É —Å—Ç–∞—Ä–∏—á–∫—É? –¢–æ–≥–¥–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä: –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ –∏–∑ Celeste üçì,
–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞ —Å, –ø–æ–∂–∞–ª—É–π, —Å–∞–º—ã–º –ª—É—á—à–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–≥–¥–∞ –ª–∏–±–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–º. –û–Ω –µ—Å—Ç—å
–≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ: https://github.com/NoelFB/Celeste/blob/master/Source/Player/Player.cs
–í —ç—Ç–æ–º –º–æ–Ω–æ–ª–∏—Ç–µ 5000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ò –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –í–æ—Ç —Ç–∞–∫!

–†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Ñ–∏–∑–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: https://2dengine.com/doc/platformers.html
–ö—Ä—É—Ç–æ–π –≤–∏–¥–æ—Å –ø—Ä–æ Celeste: https://www.youtube.com/watch?v=yorTG9at90g

–õ–ò–¶–ï–ù–ó–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –ó–ê–ü–†–ï–©–ï–ù–û.
–ï—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ $10. (c) –∫–∞–≤–∞–π–Ω—ã–π-–∫–æ–¥



–ò—Ç–∞–∫, –æ–±—ä—è—Å–Ω—è—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—ã–∂–æ–∫ –æ—Ç —Å—Ç–µ–Ω—ã ü§ì

1. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –≤–æ–∑–¥—É—Ö–µ –≤—Ä–µ–∑–∞–µ—Ç—Å—è –≤ —Å—Ç–µ–Ω—É, –æ–Ω "–ø—Ä–∏–ª–µ–ø–ª—è–µ—Ç—Å—è" –∫ –Ω–µ–π.
2. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–¥—Ç–∏ –≤ —Å—Ç–µ–Ω—É, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–∫–æ–ª—å–∑–∏—Ç —Å
   –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é PLAYER_WALL_SLIDE_SPEED.
3. –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ: –∏–≥—Ä–æ–∫ –æ—Ç–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –æ—Ç —Å—Ç–µ–Ω—ã. –ü–æ—Å–ª–µ –ø—Ä—ã–∂–∫–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ
   –≤—Ä–µ–º—è (PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME) —É –∏–≥—Ä–æ–∫–∞
   —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥—á–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—ë—Ç.
   –¢–∞–∫–∏–µ –¥–µ–ª–∞.

–í—Å—ë –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑–º–µ—Ä—è—é—Ç—Å—è –ª–∏–±–æ –≤ '–ø–∏–∫—Å–µ–ª—è—Ö', –ª–∏–±–æ –≤ '—Å–µ–∫—É–Ω–¥–∞—Ö', –ª–∏–±–æ –≤ '–ø–∏–∫—Å–µ–ª—è—Ö –≤ —Å–µ–∫—É–Ω–¥—É'.
–ï—â—ë –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç 0 –¥–æ 1 ‚öñ

--]]

PLAYER_MAX_HORIZONTAL_SPEED = 67.0
PLAYER_HORIZONTAL_ACCELERATION = 900.0
PLAYER_FRICTION = 12.0
PLAYER_AIR_FRICTION = 0.52 * PLAYER_FRICTION

PLAYER_WALL_SLIDE_SPEED = 30.0
PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH = 140.0
PLAYER_WALL_JUMP_VERTICAL_STRENGTH = 120.0
PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME = 0.26
PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL = 0.2

PLAYER_ATTACK_DURATION = 0.2
PLAYER_DAMAGE = 10

PLAYER_COYOTE_TIME = 0.23
PLAYER_JUMP_BUFFER_TIME = 0.18

PLAYER_MAX_FALL_SPEED = 200.0
PLAYER_JUMP_HEIGHT = 24
PLAYER_TIME_TO_APEX = 0.33 -- –í—Ä–µ–º—è, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤—ã—Å—à–µ–π —Ç–æ—á–∫–∏ –ø—Ä—ã–∂–∫–∞ (apex)
PLAYER_GRAVITY = (2 * PLAYER_JUMP_HEIGHT) / (PLAYER_TIME_TO_APEX * PLAYER_TIME_TO_APEX)
PLAYER_GRAVITY_AFTER_WALL_JUMP = 0.75 * PLAYER_GRAVITY
PLAYER_JUMP_STRENGTH = math.sqrt(2 * PLAYER_GRAVITY * PLAYER_JUMP_HEIGHT)

PLAYER_SPRITE_IDLE = Sprite:new({257})
PLAYER_SPRITE_RUNNING = Sprite:new({258, 258, 258, 258, 259, 259, 259, 259})
-- –ê —á—Ç–æ? üò≥
PLAYER_SPRITE_ATTACK = Sprite:new({276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277})
PLAYER_SPRITE_JUMP = Sprite:new({273})
PLAYER_SPRITE_DEAD = Sprite:new({274})

player = {
    x = PLAYER_START_X,
    y = PLAYER_START_Y,
    velocity = {
        x = 0,
        y = 0,
    },
    hitbox = Hitbox:new(2, 0, 4, 8), -- 2048 ü§ì

    sprite = PLAYER_SPRITE_IDLE,

    stuck_to_left_wall = false,
    stuck_to_right_wall = false,
    looking_left = false,
    was_on_ground_last_frame = false,
    is_dead = false,

    time_before_we_can_stick_to_wall = 0.0,
    coyote_time = 0.0,
    attack_timer = 0.0,
    jump_buffer_time = 0.0,
    remove_horizontal_speed_limit_time = 0.0,
    time_we_have_been_running = 0.0,
}

local function tick_timer(timer)
    return math.max(timer - Time.dt(), 0.0)
end

function player.update(self)
    if self.is_dead then
        return
    end

    -- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ update() üì∞
    --
    -- 1. –ù–∞ –Ω–∞—á–∞–ª–µ –∫–∞–¥—Ä–∞ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ "–∑–∞–ø—Ä–æ—Å–æ–≤" –∫ —Ñ–∏–∑–∏–∫–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    --    –∫–∞–∫–∏–µ —Å—Ç–µ–Ω—ã —Ä—è–¥–æ–º —Å –Ω–∞–º–∏, –Ω–∞ –∑–µ–º–ª–µ –ª–∏ –º—ã, —Ç.–¥.
    --
    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–ª—ã", —á—Ç–æ
    --    –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞.  –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –º—ã –Ω–∞–∂–∏–º–∞–µ–º RIGHT, —Ç–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    --    –ø–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ(!) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–æ. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å –º—ã
    --    –æ–ø—Ä–µ–¥–µ–ª—è–µ–º player.velocity
    --
    -- 3. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (next_x, next_y). –û–¥–Ω–∞–∫–æ
    --    —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –Ω–∞—à—É —Å–≤–æ–±–æ–¥—É üóΩ‚ùå! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–µ
    --    —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –Ω–∏ —Å —á–µ–º. –ê –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, —Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
    --    –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –∫ –º–µ—Å—Ç—É –∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ. –î—Ä—É–≥–∏–º–∏
    --    —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ (2) —Å—Ç–∞–≤–∏—Ç player.velocity, —Ç–æ (3) —Å—Ç–∞–≤–∏—Ç player.x, player.y.
    --    –Ø –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –æ–±—ä—è—Å–Ω—è—é, –º–Ω–µ –Ω–∞–¥–æ–µ–ª–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã. –ß–∏—Ç–∞–π—Ç–µ –∫–æ–¥ —Å–∞–º–∏ üò°!
    --


    -- 1. –ó–∞–ø—Ä–æ—Å—ã. –ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ
    local is_on_ground = Physics.is_on_ground(self)

    local collision_to_the_left = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(self.x - 1, self.y))
    local hugging_left_wall = collision_to_the_left ~= nil

    local collision_to_the_right = Physics.check_collision_rect_tilemap(self.hitbox:to_rect(self.x + 1, self.y))
    local hugging_right_wall = collision_to_the_right ~= nil

    -- –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏–∑–∏—é –ø–ª–æ—Ö–æ–≥–æ —Ç–∞–π–ª–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ is_dead
    --
    -- ‚ö†  –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†
    -- –≠—Ç–æ—Ç –∫–æ–¥ —Å –ø–ª–æ—Ö–∏–º–∏ —Ç–∞–π–ª–∞–º–∏ –Ω–µ –º–æ–π. –¢–∞–∫ —á—Ç–æ –Ω–µ –∂–∞–ª—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ! üò†
    --
    local tiles_that_we_collide_with = Physics.tile_ids_that_intersect_with_rect(self.hitbox:to_rect(self.x,self.y))
    for _, collision in ipairs(tiles_that_we_collide_with) do
        for _, bad_tile in pairs(data.bad_tile) do
            if collision.id == bad_tile then
                self.is_dead = true
                game.dialog_window.is_closed = false
                game.status = false
                self.x = PLAYER_START_X
                self.y = PLAYER_START_Y
                self.velocity.x = 0
                self.velocity.y = 0
                return
            end
        end
    end

    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å self.velocity
    local walking_right = btn(BUTTON_RIGHT) or key(KEY_D)
    local walking_left = btn(BUTTON_LEFT) or key(KEY_A)
    local looking_down = btn(BUTTON_DOWN) or key(KEY_S)
    local looking_up = btn(BUTTON_UP) or key(KEY_W)
    local jump_pressed = btnp(BUTTON_Z) or keyp(KEY_W)
    local attack_pressed = btnp(BUTTON_X)
    if jump_pressed then
      self.jump_buffer_time = PLAYER_JUMP_BUFFER_TIME
    end

    if attack_pressed then
        if self.attack_timer == 0 then
            self.attack_timer = PLAYER_ATTACK_DURATION
        else
            -- –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞—Ç—å –±—É—Ñ–µ—Ä –¥–ª—è –∞—Ç–∞–∫–∏? ü§î
        end
    end

    if self.attack_timer == 0 then
        self.attack_rect = nil
    else
        -- –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–Ω–µ–Ω–∏—è Clean Code –ø—Ä–∏–Ω—Ü–∏–ø–∞ (c)
        -- Don't Repeat Yourself (DRY). –Ø, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç,
        -- —Å—Ç—Ä–µ–º–ª—é—Å—å –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å best practices –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        -- design patterns. –ú–æ–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ S.O.L.I.D, YAGNI,
        -- G.R.A.S.P, –∏ —Ç.–¥. –∏ —Ç.–ø. –õ—é–±–ª—é TDD, DDD –∏ OOP.
        --
        -- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –Ω–µ—Ç—É, –Ω–æ —Å—Ç—Ä–µ–º–ª—é—Å—å —É–ª—É—á—à–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –∞—Å–ø–µ–∫—Ç–µ
        -- –ü–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã: —è –≤—Å–µ –ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å, –Ω–æ –ø–æ—Ç–æ–º —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞–ª,
        --              –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Ö–∞ architecture –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É
        --              —è –∏—Ö –Ω–∞—á–∏–Ω–∞–ª —Å –Ω—É–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        --              best practices
        --
        -- –ë—É–¥—É —Ä–∞–¥ —Ä–∞–±–æ—Ç–∞—Ç—å —É –≤–∞—Å üòª! -- kawaii-–ì–æ–¥
        --
        -- side note:
        -- –¢–æ—á–Ω–æ –ª–∏ –∞—Ç–∞–∫–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ - —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è?
        local diagonal_direction = 0
        if walking_left then
            diagonal_direction = 0 - 1
        elseif walking_right then
            -- –Ø —Ö–æ—Ç–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ +1, –Ω–æ lua –Ω–µ —Å–º–æ–≥ –æ—Ç–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É...
            diagonal_direction = 0 + 1
        end

        local attack_direction_x = 0
        local attack_direction_y = 0
        if looking_down then
            attack_direction_y = attack_direction_y + 1
            attack_direction_x = attack_direction_x + diagonal_direction
        elseif looking_up then
            attack_direction_y = attack_direction_y - 1
            attack_direction_x = attack_direction_x + diagonal_direction
        else
            if self.looking_left then
                attack_direction_x = attack_direction_x - 1
            else
                attack_direction_x = attack_direction_x + 1
            end
        end

        local attack_width = 6
        local attack_height = 6
        local attack_x = self.x + 4 - attack_width / 2 + attack_direction_x * 8
        local attack_y = self.y + 4 - attack_height / 2 + attack_direction_y * 8
        self.attack_rect = Rect:new(attack_x, attack_y, attack_width, attack_height)

        local attack_tilemap_collision = Physics.check_collision_rect_tilemap(self.attack_rect)
        if attack_tilemap_collision ~= nil then
            self.attack_timer = 0
        end

        hit_pandas = {}
        for _, panda in ipairs(game.pandas) do
            if Physics.check_collision_rect_rect(self.attack_rect, Hitbox.rect_of(panda)) then
                table.insert(hit_pandas, panda)
            end
        end
        if #hit_pandas > 0 then
            if looking_down then
                self.velocity.y = PLAYER_JUMP_STRENGTH
            end

            for _, panda in ipairs(hit_pandas) do
                panda:harm(PLAYER_DAMAGE)
                panda:get_hit(attack_direction_x, attack_direction_y)
            end
            self.attack_timer = 0
        end
    end

    if not moving_right and not moving_left then
        if is_on_ground then
            self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_FRICTION * Time.dt()
        else
            -- –¢–∏–ø–∞ –≤ –≤–æ–∑–¥—É—Ö–µ –¥—Ä—É–≥–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ üí®
            -- –ù–µ –∑–Ω–∞—é, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω—É–∂–Ω–æ üòÖ
            self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_AIR_FRICTION * Time.dt()
        end
    end
    local not_at_speed_limit = math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED
    if not_at_speed_limit then
        if walking_right then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x + PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        if walking_left then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x - PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        self.velocity.x = math.clamp(self.velocity.x, -PLAYER_MAX_HORIZONTAL_SPEED, PLAYER_MAX_HORIZONTAL_SPEED)
    end

    if not is_on_ground then
        if self.remove_horizontal_speed_limit_time == 0.0 then
            self.velocity.y = self.velocity.y - PLAYER_GRAVITY * Time.dt()
        else
            self.velocity.y = self.velocity.y - PLAYER_GRAVITY_AFTER_WALL_JUMP * Time.dt()
        end
    end

    local has_jumped = false
    local should_jump = self.jump_buffer_time > 0.0
    if should_jump then
        if is_on_ground and self.velocity.y <= 0 then
            self.velocity.y = PLAYER_JUMP_STRENGTH
            has_jumped = true
            self.time_before_we_can_stick_to_wall = PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL
        elseif hugging_left_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
        elseif hugging_right_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = -1 * PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
        end
    end
    if jump_inputted and self.coyote_time > 0.0 and self.velocity.y <= 0.0 then
        self.velocity.y = PLAYER_JUMP_STRENGTH
        self.time_before_we_can_stick_to_wall = PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL
        has_jumped = true
    end
    if has_jumped then
        self.coyote_time = 0.0
        self.jump_buffer_time = 0.0
    end

    if not is_on_ground and self.was_on_ground_last_frame and self.velocity.y <= 0 then
       self.coyote_time = PLAYER_COYOTE_TIME
    end
    self.was_on_ground_last_frame = is_on_ground

    local can_stick_to_wall = self.time_before_we_can_stick_to_wall == 0.0
    if not is_on_ground and can_stick_to_wall then
        if hugging_left_wall and self.velocity.x < 0 then
            self.velocity.y = -1 * PLAYER_WALL_SLIDE_SPEED
        end
        if hugging_right_wall and self.velocity.x > 0 then
            self.velocity.y = -1 * PLAYER_WALL_SLIDE_SPEED
        end
    end


    EPSILON = 4.0
    if math.abs(self.velocity.x) < EPSILON then
        self.velocity.x = 0
    end
    if math.abs(self.velocity.y) < EPSILON then
        self.velocity.y = 0
    end

    self.velocity.y = math.clamp(self.velocity.y, -PLAYER_MAX_FALL_SPEED, PLAYER_MAX_FALL_SPEED)

    local moving_right = self.velocity.x > 0
    local moving_left  = self.velocity.x < 0
    if moving_right then
        self.looking_left = false
    elseif moving_left then
        self.looking_left = true
    end


    -- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π. –£–∂–µ –Ω–µ —Ç–∞–∫ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –≤—ã–Ω–µ—Å –∫–æ–¥ –≤ Physics
    local horizontal_collision = Physics.move_x(self)
    if horizontal_collision ~= nil then
        self.velocity.x = 0
    end

    local vertical_collision = Physics.move_y(self)
    if vertical_collision ~= nil then
        self.velocity.y = 0
    end

    if self.attack_timer > 0 then
        self.sprite = PLAYER_SPRITE_ATTACK
    elseif self.velocity.y ~= 0 then
        self.sprite = PLAYER_SPRITE_JUMP
    elseif self.time_we_have_been_running > 0.1 and self.velocity.x ~= 0 then
        self.sprite = PLAYER_SPRITE_RUNNING
    else
        self.sprite = PLAYER_SPRITE_IDLE
    end

    -- –£ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –º–Ω–æ–≥–æ –≤–µ—â–µ–π, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (—Ç–∞–π–º–µ—Ä–æ–≤).
    -- –û–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç—É—Ç, –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ.
    --
    -- –†–∞–∑ —É–∂ —è –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç, –ø–æ—è—Å–Ω—é –∑–∞ —Ç–∞–π–º–µ—Ä—ã ‚åõ
    -- –¢–∞–π–º–µ—Ä - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (–æ–±–æ–∑–Ω–∞—á–∏–º –µ–≥–æ t). –ï—Å–ª–∏ t =
    -- 0, –∑–Ω–∞—á–∏—Ç —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è. –ï—Å–ª–∏ –∂–µ t > 0, —Ç–æ —Ç–∞–π–º–µ—Ä –∏–¥–µ—Ç, –∏ –æ—Å—Ç–∞–ª–æ—Å—å
    -- t —Å–µ–∫—É–Ω–¥ –¥–æ –∫–æ–Ω—Ü–∞. –î–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ
    -- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å, –≤ –∏–≥—Ä–æ–∫–µ.
    self.time_before_we_can_stick_to_wall = tick_timer(self.time_before_we_can_stick_to_wall)
    self.jump_buffer_time = tick_timer(self.jump_buffer_time)
    self.coyote_time = tick_timer(self.coyote_time)
    self.remove_horizontal_speed_limit_time = tick_timer(self.remove_horizontal_speed_limit_time)
    self.attack_timer = tick_timer(self.attack_timer)
    if self.velocity.x ~= 0 then
        self.time_we_have_been_running = self.time_we_have_been_running + Time.dt()
    else
        self.time_we_have_been_running = 0
    end
end

function player.draw(self)
    local colorkey = 0
    local scale = 1
    local flip = self.looking_left and 1 or 0

    local tx, ty = game.camera_window:transform_coordinates(self.x, self.y)

    self.sprite:nextFrame()
    spr(self.sprite:current(), tx, ty, colorkey, scale, flip)

    if self.attack_rect then
        self.attack_rect:draw()
    end
end
