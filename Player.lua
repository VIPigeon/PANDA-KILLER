--[[

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∂—É–Ω–≥–ª–∏! üå¥üêí

–ù–∏–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª–æ—Ç–Ω–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç–∏—Ä–∞–Ω–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–º. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
–≤—Å—è –ª–æ–≥–∏–∫–∞ –ª–µ–∂–∏—Ç –≤ player.update(). –ê —á—Ç–æ? –î—É–º–∞–µ—Ç–µ —ç—Ç–æ –Ω–µ –∫—Ä—É—Ç–æ(–≤–æ–æ–±—â–µ-—Ç–æ –¥–∞ << Nerd), —á—Ç–æ —É –º–µ–Ω—è –±–æ–ª—å—à–∞—è
—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –µ—â—ë –±–æ–ª—å—à–µ –≤ –±—É–¥—É—â–µ–º? –í–æ—Ç —á—Ç–æ –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫ (ü§Ø) —Å–∫–∞–∑–∞–ª
–±—ã –≤–∞–º: https://cbarrete.com/carmack.html

–ù–µ –∑–Ω–∞–µ—Ç–µ –∫—Ç–æ —Ç–∞–∫–æ–π –î–∂–æ–Ω –ö–∞—Ä–º–∞–∫? –ü–æ–∑–æ—Ä. –ù–µ, —Ä–µ–∞–ª—å–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ —ç—Ç–æ ü§¨.
–ò —Å—Ç–∞—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ.

–ù–µ –≤–µ—Ä–∏—Ç–µ —ç—Ç–æ–º—É —Å—Ç–∞—Ä–∏—á–∫—É? –¢–æ–≥–¥–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä: –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ –∏–∑ Celeste üçì,
–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞ —Å, –ø–æ–∂–∞–ª—É–π, —Å–∞–º—ã–º –ª—É—á—à–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–≥–¥–∞ –ª–∏–±–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–º. –û–Ω –µ—Å—Ç—å
–≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ: https://github.com/NoelFB/Celeste/blob/master/Source/Player/Player.cs
–í —ç—Ç–æ–º –º–æ–Ω–æ–ª–∏—Ç–µ 5000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ò –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –í–æ—Ç —Ç–∞–∫!

–†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Ñ–∏–∑–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: https://2dengine.com/doc/platformers.html
–ö—Ä—É—Ç–æ–π –≤–∏–¥–æ—Å –ø—Ä–æ Celeste: https://www.youtube.com/watch?v=yorTG9at90g

–õ–ò–¶–ï–ù–ó–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö –ó–ê–ü–†–ï–©–ï–ù–û.
–ï—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ $10. (c) –∫–∞–≤–∞–π–Ω—ã–π-–∫–æ–¥

--]]

-- ‚è∞

--[[

–ò—Ç–∞–∫, –æ–±—ä—è—Å–Ω—è—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—ã–∂–æ–∫ –æ—Ç —Å—Ç–µ–Ω—ã ü§ì

1. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –≤–æ–∑–¥—É—Ö–µ –≤—Ä–µ–∑–∞–µ—Ç—Å—è –≤ —Å—Ç–µ–Ω—É, –æ–Ω "–ø—Ä–∏–ª–µ–ø–ª—è–µ—Ç—Å—è" –∫ –Ω–µ–π.
2. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–¥—Ç–∏ –≤ —Å—Ç–µ–Ω—É, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–∫–æ–ª—å–∑–∏—Ç —Å
   –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é PLAYER_WALL_SLIDE_SPEED.
3. –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ: –∏–≥—Ä–æ–∫ –æ—Ç–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –æ—Ç —Å—Ç–µ–Ω—ã. –ü–æ—Å–ª–µ –ø—Ä—ã–∂–∫–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ
   –≤—Ä–µ–º—è (PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME) —É –∏–≥—Ä–æ–∫–∞
   —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥—á–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—ë—Ç.
   –¢–∞–∫–∏–µ –¥–µ–ª–∞.

–í—Å—ë –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑–º–µ—Ä—è—é—Ç—Å—è –ª–∏–±–æ –≤ '–ø–∏–∫—Å–µ–ª—è—Ö', –ª–∏–±–æ –≤ '—Å–µ–∫—É–Ω–¥–∞—Ö', –ª–∏–±–æ –≤ '–ø–∏–∫—Å–µ–ª—è—Ö –≤ —Å–µ–∫—É–Ω–¥—É'.
–ï—â—ë –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç 0 –¥–æ 1 ‚öñ

--]]

PLAYER_MAX_HORIZONTAL_SPEED = 67.0
PLAYER_HORIZONTAL_ACCELERATION = 900.0
PLAYER_FRICTION = 0.2
PLAYER_AIR_FRICTION = 0.5 * PLAYER_FRICTION

PLAYER_WALL_SLIDE_SPEED = 30.0
PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH = 140.0
PLAYER_WALL_JUMP_VERTICAL_STRENGTH = 120.0
PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME = 0.26
PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL = 0.2

PLAYER_ATTACK_DURATION = 0.2

PLAYER_COYOTE_TIME = 0.23
PLAYER_JUMP_BUFFER_TIME = 0.18

PLAYER_MAX_FALL_SPEED = 200.0
PLAYER_JUMP_HEIGHT = 24
PLAYER_TIME_TO_APEX = 0.33 -- –í—Ä–µ–º—è, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤—ã—Å—à–µ–π —Ç–æ—á–∫–∏ –ø—Ä—ã–∂–∫–∞ (apex)
PLAYER_GRAVITY = (2 * PLAYER_JUMP_HEIGHT) / (PLAYER_TIME_TO_APEX * PLAYER_TIME_TO_APEX)
PLAYER_GRAVITY_AFTER_WALL_JUMP = 0.75 * PLAYER_GRAVITY
PLAYER_JUMP_STRENGTH = math.sqrt(2 * PLAYER_GRAVITY * PLAYER_JUMP_HEIGHT)

PLAYER_SPRITE_IDLE = Sprite:new({257})
PLAYER_SPRITE_RUNNING = Sprite:new({258, 258, 258, 258, 259, 259, 259, 259})
-- –ê —á—Ç–æ? üò≥
PLAYER_SPRITE_ATTACK = Sprite:new({276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277})
PLAYER_SPRITE_JUMP = Sprite:new({273})
PLAYER_SPRITE_DEAD = Sprite:new({274})


player = {
    x = 0,
    y = 40,
    velocity = {
        x = 0,
        y = 0,
    },
    hitbox = {
        offset_x = 2,
        offset_y = 0,
        width = 4,
        height = 8,
    },

    stuck_to_left_wall = false,
    stuck_to_right_wall = false,
    looking_left = false,
    was_on_ground_last_frame = false,

    time_before_we_can_stick_to_wall = 0.0,
    coyote_time = 0.0,
    attack_timer = 0.0,
    jump_buffer_time = 0.0,
    remove_horizontal_speed_limit_time = 0.0,

    sprite = PLAYER_SPRITE_IDLE,
}


-- TODO: –í—Å–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ö–∏—Ç–±–æ–∫—Å–∞–º–∏ –Ω—É–∂–Ω–æ –∫—É–¥–∞-—Ç–æ —É–±—Ä–∞—Ç—å
--
-- –û–¥–Ω–æ–π –∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –±—É–º–µ—Ä–∞–Ω–≥–µ –±—ã–ª–æ —Ç–æ, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
-- –æ–±—ä–µ–∫—Ç–∞ (x, y) –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ hitbox,
-- –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —Ç–æ–∂–µ —Ç—Ä–µ–±–æ–≤–∞–ª –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
-- –ú–æ–∂–µ—Ç –≤–æ—Ç —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –ª—É—á—à–µ.
local function hitbox_top(something_with_hitbox)
    return something_with_hitbox.y + something_with_hitbox.hitbox.offset_y
end

local function hitbox_bottom(something_with_hitbox)
    return hitbox_top(something_with_hitbox) + something_with_hitbox.hitbox.height
end

local function hitbox_left(something_with_hitbox)
    return something_with_hitbox.x + something_with_hitbox.hitbox.offset_x
end

local function hitbox_right(something_with_hitbox)
    return hitbox_left(something_with_hitbox) + something_with_hitbox.hitbox.width
end

--[[

+---+     +-+      +---+
|   |  +  | |   =  |   |
+---+     | |      |   |
          +-+      +---+

--]]
local function combine_hitboxes(h1, h2)
    local x1 = math.min(h1.x, h2.x)
    local y1 = math.min(h1.y, h2.y)
    local x2 = math.max(h1.x + h1.w, h2.x + h2.w)
    local y2 = math.max(h1.y + h1.h, h2.y + h2.h)
    return {
        x = x1,
        y = y1,
        w = x2 - x1,
        h = y2 - y1,
    }
end

-- –î—É–∞–ª—å–Ω–æ—Å—Ç—å —Ö–∏—Ç–±–æ–∫—Å–æ–≤ —Å –æ—Ñ—Ñ—Å–µ—Ç–æ–º –∏ –±–µ–∑ –º–µ–Ω—è –ø–æ–¥–±–µ—à–∏–≤–∞–µ—Ç ü§¨
-- –ï—Å—Ç—å —Ö–∏—Ç–±–æ–∫—Å —Å offset_x, offset_y, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏—Ü–µ–ø–ª—è—Ç—å –∫ –¥—Ä—É–≥–æ–º—É
-- –∏–≥—Ä–æ–≤–æ–º—É –æ–±—ä–µ–∫—Ç—É, –∞ –µ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å (–ø—Ä–æ—Å—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
-- —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å x, y -- –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò —Å –Ω–∏–º–∏
-- –Ω–µ–º–Ω–æ–≥–æ –ø—É—Ç–∞–Ω–∏—Ü–∞. –í–æ—Ç –±—ã —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ üòã
--
-- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏–∑ –æ—Ñ—Ñ—Å–µ—Ç–Ω–æ–≥–æ –≤ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
local function hitbox_as_if_it_was_at(hitbox, x, y)
    return {
        x = x + hitbox.offset_x,
        y = y + hitbox.offset_y,
        w = hitbox.width,
        h = hitbox.height,
    }
end


-- TODO: –≠—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –Ω—É–∂–Ω–æ –∫—É–¥–∞-—Ç–æ –≤—ã–¥–µ–ª–∏—Ç—å
--
-- –í –∏–≥—Ä–µ –µ—Å—Ç—å 3 —Ä–∞–∑–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å.
-- 1. –ú–∏—Ä–æ–≤–∞—è -- –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö, x –æ—Ç 0 –¥–æ 1920, y –æ—Ç 0 –¥–æ 1088
-- 2. –¢–∞–π–ª–æ–≤–∞—è -- –∫–∞–∂–¥—ã–π —Ç–∞–π–ª 8x8 –ø–∏–∫—Å–µ–ª–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥ –∏–∑
--    –º–∏—Ä–æ–≤–æ–π –≤ —Ç–∞–π–ª–æ–≤—É—é –∏ –æ–±—Ä–∞—Ç–Ω–æ - —ç—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏–µ / –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 8.
--    –í —Ç–∞–π–ª–æ–≤–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ x –æ—Ç 0 –¥–æ 240, y –æ—Ç 0 –¥–æ 136
-- 3. –õ–æ–∫–∞–ª—å–Ω–∞—è -- –µ—ë –µ—â—ë –Ω–µ—Ç—É, –Ω–æ –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞–º–µ—Ä–æ–π –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
--    –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—ë.
local function world_to_tile(x, y)
    local tile_x = x // 8
    local tile_y = y // 8
    return tile_x, tile_y
end

local function tile_to_world(x, y)
    local world_x = x * 8
    local world_y = y * 8
    return world_x, world_y
end

local function is_tile_solid(tile_id)
    -- XD –≠—Ç–æ –∫–æ–º—É-—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å üòÜüòÇüòÇ
    return tile_id == 1
end

-- TODO: –£–≤–µ—Ä–µ–Ω, –≤ –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ
-- —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ, –Ω–æ –≤–æ–æ–±—â–µ –≤—Å–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∏–ª–∏—Å—å.
local function check_collision_hitbox_tilemap(hitbox)
    assert(hitbox.w ~= 0)
    assert(hitbox.h ~= 0)

    local x = hitbox.x
    local y = hitbox.y
    local x2 = hitbox.x + hitbox.w - 1
    local y2 = hitbox.y + hitbox.h - 1

    local tile_x = x // 8
    local tile_y = y // 8

    local tile_x1 = x // 8
    local tile_y1 = y // 8
    local tile_x2 = x2 // 8
    local tile_y2 = y2 // 8

    while y <= y2 do
        while x <= x2 do
            local tile_id = mget(tile_x, tile_y)

            if is_tile_solid(tile_id) then
                return {
                    x = 8 * tile_x,
                    y = 8 * tile_y,
                }
            end

            tile_x = tile_x + 1
            x = x + 8
        end

        y = y + 8
        tile_y = tile_y + 1
        x = hitbox.x
        tile_x = x // 8
    end

    if is_tile_solid(mget(tile_x2, tile_y1)) then
        return { x = 8 * tile_x2, y = 8 * tile_y1 }
    end

    if is_tile_solid(mget(tile_x1, tile_y2)) then
        return { x = 8 * tile_x1, y = 8 * tile_y2 }
    end

    if is_tile_solid(mget(tile_x2, tile_y2)) then
        return { x = 8 * tile_x2, y = 8 * tile_y2 }
    end

    return nil
end


local function trace_hitbox(hitbox)
    trace('x = ' .. hitbox.x .. ' y = ' .. hitbox.y .. ' w = ' .. hitbox.w .. ' h = ' .. hitbox.h)
end

local debug_rects = {}


function player.update(self)
    -- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ update() üì∞
    --
    -- 1. –ù–∞ –Ω–∞—á–∞–ª–µ –∫–∞–¥—Ä–∞ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ "–∑–∞–ø—Ä–æ—Å–æ–≤" –∫ —Ñ–∏–∑–∏–∫–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    --    –∫–∞–∫–∏–µ —Å—Ç–µ–Ω—ã —Ä—è–¥–æ–º —Å –Ω–∞–º–∏, –Ω–∞ –∑–µ–º–ª–µ –ª–∏ –º—ã, —Ç.–¥.
    --
    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–ª—ã", —á—Ç–æ
    --    –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞.  –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –º—ã –Ω–∞–∂–∏–º–∞–µ–º RIGHT, —Ç–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    --    –ø–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ(!) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–æ. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å –º—ã
    --    –æ–ø—Ä–µ–¥–µ–ª—è–µ–º player.velocity
    --
    -- 3. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (desired_x, desired_y). –û–¥–Ω–∞–∫–æ
    --    —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –Ω–∞—à—É —Å–≤–æ–±–æ–¥—É üóΩ‚ùå! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–µ
    --    —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –Ω–∏ —Å —á–µ–º. –ê –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, —Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
    --    –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –∫ –º–µ—Å—Ç—É –∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ. –î—Ä—É–≥–∏–º–∏
    --    —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ (2) —Å—Ç–∞–≤–∏—Ç player.velocity, —Ç–æ (3) —Å—Ç–∞–≤–∏—Ç player.x, player.y.
    --    –Ø –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –æ–±—ä—è—Å–Ω—è—é, –º–Ω–µ –Ω–∞–¥–æ–µ–ª–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã. –ß–∏—Ç–∞–π—Ç–µ –∫–æ–¥ —Å–∞–º–∏ üò°!
    --


    -- 1. –ó–∞–ø—Ä–æ—Å—ã. –ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ
    local ground_collision = check_collision_hitbox_tilemap(hitbox_as_if_it_was_at(self.hitbox, self.x, self.y + 1))
    local is_on_ground = ground_collision ~= nil

    local collision_to_the_left = check_collision_hitbox_tilemap(hitbox_as_if_it_was_at(self.hitbox, self.x - 1, self.y))
    local hugging_left_wall = collision_to_the_left ~= nil

    local collision_to_the_right = check_collision_hitbox_tilemap(hitbox_as_if_it_was_at(self.hitbox, self.x + 1, self.y))
    local hugging_right_wall = collision_to_the_right ~= nil

    -- –î–ª—è –¥–µ–±–∞–≥–∞
    if is_on_ground then
        table.insert(debug_rects, { x = ground_collision.x, y = ground_collision.y, w = 8, h = 8 })
    end
    if hugging_left_wall then
        table.insert(debug_rects, { x = collision_to_the_left.x, y = collision_to_the_left.y, w = 8, h = 8 })
    end
    if hugging_right_wall then
        table.insert(debug_rects, { x = collision_to_the_right.x, y = collision_to_the_right.y, w = 8, h = 8 })
    end

    -- 2. –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å self.velocity
    local walking_right = btn(BUTTON_RIGHT)
    local walking_left = btn(BUTTON_LEFT)
    local looking_down = btn(BUTTON_DOWN)
    local looking_up = btn(BUTTON_UP)
    local jump_pressed = btnp(BUTTON_Z)
    local attack_pressed = btnp(BUTTON_X)
    if jump_pressed then
      self.jump_buffer_time = PLAYER_JUMP_BUFFER_TIME
    end

    if attack_pressed then
        if self.attack_timer == 0 then
            self.attack_timer = PLAYER_ATTACK_DURATION
        else
            -- –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞—Ç—å –±—É—Ñ–µ—Ä –¥–ª—è –∞—Ç–∞–∫–∏? ü§î
        end
    end

    if self.attack_timer == 0 then
        self.attack_hitbox = nil
    else
        local attack_x = self.x
        local attack_y = self.y

        -- –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–Ω–µ–Ω–∏—è Clean Code –ø—Ä–∏–Ω—Ü–∏–ø–∞ (c)
        -- Don't Repeat Yourself (DRY). –Ø, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç,
        -- —Å—Ç—Ä–µ–º–ª—é—Å—å –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å best practices –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        -- design patterns. –ú–æ–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ S.O.L.I.D, YAGNI,
        -- G.R.A.S.P, –∏ —Ç.–¥. –∏ —Ç.–ø. –õ—é–±–ª—é TDD, DDD –∏ OOP.
        --
        -- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –Ω–µ—Ç—É, –Ω–æ —Å—Ç—Ä–µ–º–ª—é—Å—å —É–ª—É—á—à–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –∞—Å–ø–µ–∫—Ç–µ
        -- –ü–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã: —è –≤—Å–µ –ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å, –Ω–æ –ø–æ—Ç–æ–º —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞–ª,
        --              –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Ö–∞ architecture –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É
        --              —è –∏—Ö –Ω–∞—á–∏–Ω–∞–ª —Å –Ω—É–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        --              best practices
        --
        -- –ë—É–¥—É —Ä–∞–¥ —Ä–∞–±–æ—Ç–∞—Ç—å —É –≤–∞—Å üòª! -- kawaii-–ì–æ–¥
        local diagonal_movement = 0
        if walking_left then
            diagonal_movement = 0 - 8
        elseif walking_right then
            -- –Ø —Ö–æ—Ç–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å +8, –Ω–æ lua –Ω–µ —Å–º–æ–≥ –æ—Ç–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É...
            diagonal_movement = 0 + 8
        end

        if looking_down then
            attack_y = attack_y + 8
            attack_x = attack_x + diagonal_movement
        elseif looking_up then
            attack_y = attack_y - 8
            attack_x = attack_x + diagonal_movement
        else
            if self.looking_left then
                attack_x = attack_x - 8
            else
                attack_x = attack_x + 8
            end
        end

        self.attack_hitbox = Rect:new(attack_x, attack_y, 8, 8)
        local collision = check_collision_hitbox_tilemap(self.attack_hitbox)
        if collision ~= nil then
            self.attack_timer = 0
        end

        for _, panda in ipairs(game.pandas) do
            if check_collision_rect_rect(self.attack_hitbox, panda.hitbox)
        end
    end

    if is_on_ground then
        self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_FRICTION
    else
        -- –¢–∏–ø–∞ –≤ –≤–æ–∑–¥—É—Ö–µ –¥—Ä—É–≥–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ üí®
        -- –ù–µ –∑–Ω–∞—é, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω—É–∂–Ω–æ üòÖ
        self.velocity.x = self.velocity.x - self.velocity.x * PLAYER_AIR_FRICTION
    end
    local not_at_speed_limit = math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED
    if not_at_speed_limit then
        if walking_right then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x + PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        if walking_left then
            if math.abs(self.velocity.x) < PLAYER_MAX_HORIZONTAL_SPEED then
                self.velocity.x = self.velocity.x - PLAYER_HORIZONTAL_ACCELERATION * Time.dt()
            end
        end
        self.velocity.x = math.clamp(self.velocity.x, -PLAYER_MAX_HORIZONTAL_SPEED, PLAYER_MAX_HORIZONTAL_SPEED)
    end

    if not is_on_ground then
        if self.remove_horizontal_speed_limit_time == 0.0 then
            self.velocity.y = self.velocity.y - PLAYER_GRAVITY * Time.dt()
        else
            self.velocity.y = self.velocity.y - PLAYER_GRAVITY_AFTER_WALL_JUMP * Time.dt()
        end
    end

    local should_jump = self.jump_buffer_time > 0.0
    local has_jumped = false
    if should_jump then
        if is_on_ground and self.velocity.y <= 0 then
            self.velocity.y = PLAYER_JUMP_STRENGTH
            has_jumped = true
            self.time_before_we_can_stick_to_wall = PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL
        elseif hugging_left_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
        elseif hugging_right_wall and not is_on_ground then
            self.velocity.y = PLAYER_WALL_JUMP_VERTICAL_STRENGTH
            self.velocity.x = -1 * PLAYER_WALL_JUMP_HORIZONTAL_STRENGTH
            self.remove_horizontal_speed_limit_time = PLAYER_REMOVE_SPEED_LIMIT_AFTER_WALL_JUMP_TIME
            has_jumped = true
        end
    end
    if jump_inputted and self.coyote_time > 0.0 and self.velocity.y <= 0.0 then
        self.velocity.y = PLAYER_JUMP_STRENGTH
        self.time_before_we_can_stick_to_wall = PLAYER_DELAY_AFTER_JUMP_BEFORE_STICKING_TO_WALL
        has_jumped = true
    end
    if has_jumped then
        self.coyote_time = 0.0
        self.jump_buffer_time = 0.0
    end

    if not is_on_ground and self.was_on_ground_last_frame and self.velocity.y <= 0 then
       self.coyote_time = PLAYER_COYOTE_TIME
    end
    self.was_on_ground_last_frame = is_on_ground

    local can_stick_to_wall = self.time_before_we_can_stick_to_wall == 0.0
    if not is_on_ground and can_stick_to_wall then
        if hugging_left_wall and self.velocity.x < 0 then
            self.velocity.y = -1 * PLAYER_WALL_SLIDE_SPEED
        end
        if hugging_right_wall and self.velocity.x > 0 then
            self.velocity.y = -1 * PLAYER_WALL_SLIDE_SPEED
        end
    end


    EPSILON = 4.0
    if math.abs(self.velocity.x) < EPSILON then
        self.velocity.x = 0
    end
    if math.abs(self.velocity.y) < EPSILON then
        self.velocity.y = 0
    end

    self.velocity.y = math.clamp(self.velocity.y, -PLAYER_MAX_FALL_SPEED, PLAYER_MAX_FALL_SPEED)

    local moving_right = self.velocity.x > 0
    local moving_left  = self.velocity.x < 0
    if moving_right then
        self.looking_left = false
    elseif moving_left then
        self.looking_left = true
    end


    -- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    local desired_x = self.x + self.velocity.x * Time.dt()
    local hitbox_after_x_move = combine_hitboxes(
        hitbox_as_if_it_was_at(self.hitbox, self.x, self.y),
        hitbox_as_if_it_was_at(self.hitbox, desired_x, self.y)
    )
    local horizontal_collision = check_collision_hitbox_tilemap(hitbox_after_x_move)
    if horizontal_collision ~= nil then
        -- desired_x is busted üí£
        if moving_right then
            desired_x = horizontal_collision.x - self.hitbox.width - self.hitbox.offset_x
        else
            desired_x = horizontal_collision.x + self.hitbox.width + self.hitbox.offset_x
        end
        self.velocity.x = 0
    end

    local desired_y = self.y - self.velocity.y * Time.dt()
    local hitbox_after_y_move = combine_hitboxes(
        hitbox_as_if_it_was_at(self.hitbox, self.x, self.y),
        hitbox_as_if_it_was_at(self.hitbox, self.x, desired_y)
    )
    local vertical_collision = check_collision_hitbox_tilemap(hitbox_after_y_move)
    if vertical_collision ~= nil then
        -- desired_y is busted üí£
        local flying_down = self.velocity.y < 0
        if flying_down then
            desired_y = vertical_collision.y - self.hitbox.height
        else
            desired_y = vertical_collision.y + self.hitbox.height
        end
        self.velocity.y = 0
    end

    if self.attack_timer > 0 then
        self.sprite = PLAYER_SPRITE_ATTACK
    elseif self.velocity.y ~= 0 then
        self.sprite = PLAYER_SPRITE_JUMP
    elseif self.velocity.x ~= 0 then
        self.sprite = PLAYER_SPRITE_RUNNING
    else
        self.sprite = PLAYER_SPRITE_IDLE
    end

    self.x = desired_x
    self.y = desired_y

    self.time_before_we_can_stick_to_wall = math.max(self.time_before_we_can_stick_to_wall - Time.dt(), 0.0)
    self.jump_buffer_time = math.max(self.jump_buffer_time - Time.dt(), 0.0)
    self.coyote_time = math.max(self.coyote_time - Time.dt(), 0.0)
    self.remove_horizontal_speed_limit_time = math.max(self.remove_horizontal_speed_limit_time - Time.dt(), 0.0)
    self.attack_timer = math.max(self.attack_timer - Time.dt(), 0.0)
end

function player.draw(self)
    local colorkey = 0
    local scale = 1
    local flip = self.looking_left and 1 or 0

    local tx, ty = game.camera_window:transform_coordinates(self.x, self.y)

    self.sprite:nextFrame()
    spr(self.sprite:current(), tx, ty, colorkey, scale, flip)

    -- –î–µ–±–∞–≥ üêú
    if false then
        for i, r in ipairs(debug_rects) do
            rect(r.x, r.y, r.w, r.h, 5 + i)
        end
    end
    debug_rects = {}

    if self.attack_hitbox then
        self.attack_hitbox:drawDebug()
    end
end
