TriggerTile = table.copy(Body)

function TriggerTile:new(x, y, width, height, trigger)
    trace('hello Im Tiler!üòç')
    width = width or 1
    height = height or 8
    local TilerDerden = {
        sprite = data.panda.sprite.stay_boring,
        hitbox = Hitbox:new(0, 0, width, height),
        x = x, y = y,
        status = 'idle',
        button_pressed = false,
        button_offset = {
            x = width // 8, y = -(height // 8 + 12),
        },
        dialog_offset = {
            x = width // 8 - 12, y = - (height // 8 + 24)
        },
        dialog_text = '–ê –¢–ê–ö–û–ï –í–ò–î–ï–õ?',
        drown = false, -- keep calmü§ô just chill bro. funny name
    }

    setmetatable(TilerDerden, self)
    self.__index = self; return TilerDerden
end

function TriggerTile:trigger()
    self.status = 'triggered'
    --trace(game.player.x..' '..game.player.y..' '..self.x..' '..self.y)
end

function TriggerTile:monitor_player()
    trace(game.player.x..' -- '..game.player.y)
end

function TriggerTile:is_colliding(collideable)
	return Physics.check_collision_obj_obj(self, collideable)
end

function TriggerTile:draw()
    Hitbox.rect_of(self):draw()
    --rect(self.x-5,self.y-5,10*9+10,10*9+9,0)
    if self.status == 'triggered' then
        local rx, ry = game.camera_window:transform_coordinates(self.x, self.y)
        spr(382, rx + self.button_offset.x, ry + self.button_offset.y)
    end
end

function TriggerTile:update()
	if self:is_colliding(game.player) then
		self:trigger()
	end
    if self.status == 'triggered' then
        --trace(table.length(game.dialog_window))

        self.button_pressed = btnp(BUTTON_A)
            --trace('a'..tostring(self.button_pressed))
            if GAMEMODE == GAMEMODE_DEBUG then
                self.button_pressed = self.button_pressed or key(KEY_TEST)
                --trace('b'..tostring(self.button_pressed))
            end

        if self.button_pressed and not self.drown then
            self.drown = true
            game.triggers.__is_active__ = {status = true, trigger = self}
            -- –ó–¥–µ—Å—å —è –¥–µ–ª–∞—é –≥–æ–≤–Ω–æ–∫–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü—É –≥–¥–µ –∫–∞–∑–∞–ª–æ—Å—å –±—ã –ª–µ–∂–∞—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã
            -- –¥–æ–±–∞–≤–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ DialogWindow
            -- –ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª KanyaQT: "–ê —á—Ç–æ? –î—É–º–∞–µ—Ç–µ —ç—Ç–æ –Ω–µ –∫—Ä—É—Ç–æ ... ? ... –ü–æ–∑–æ—Ä. ... –ù–µ, —Ä–µ–∞–ª—å–Ω–æ ... ."
            -- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å Game, —ç—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª–æ–º–∞–µ—Ç
            -- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –≤ DialogWindow, —ç—Ç–æ –≤—Å—ë –ø–æ–ª–æ–º–∞–µ—Ç
            -- –ü–æ—ç—Ç–æ–º—É –º–æ–π –¥–æ–ª–≥ —Å–Ω—è—Ç—å —Å —Å–µ–±—è —ç—Ç–æ –≤–∏–Ω—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å 8 —Å—Ç—Ä–æ–∫ –æ —Ç–æ–º,
            -- —á—Ç–æ –Ω–∞—Ä—É—à–∞—Ç—å —ç—Ç–æ –•–†–£–ü–ö–û–ï —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ **–ù–ï–õ–¨–ó–Ø**
            local __dx_dw = DialogWindow:new(self.x + self.dialog_offset.x, self.y + self.dialog_offset.y, self.dialog_text)
            table.insert(game.dialog_window, __dx_dw)
            game.status = not game.status
            --trace(tostring(self.trigger_button_pressed)..' '..'AAAAAAAAAAAAAAAAAAAAAHhüí¶üí¶üí¶')
        end
    end
    --self:monitor_player()
end